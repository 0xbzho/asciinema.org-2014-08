[[0.052572,{"lines":{"0":[["ksc@ksc-desktop:~/demo$                                                                                                                      ",{}]],"1":[["                                                                                                                                             ",{}]],"2":[["                                                                                                                                             ",{}]],"3":[["                                                                                                                                             ",{}]],"4":[["                                                                                                                                             ",{}]],"5":[["                                                                                                                                             ",{}]],"6":[["                                                                                                                                             ",{}]],"7":[["                                                                                                                                             ",{}]],"8":[["                                                                                                                                             ",{}]],"9":[["                                                                                                                                             ",{}]],"10":[["                                                                                                                                             ",{}]],"11":[["                                                                                                                                             ",{}]],"12":[["                                                                                                                                             ",{}]],"13":[["                                                                                                                                             ",{}]],"14":[["                                                                                                                                             ",{}]],"15":[["                                                                                                                                             ",{}]],"16":[["                                                                                                                                             ",{}]],"17":[["                                                                                                                                             ",{}]],"18":[["                                                                                                                                             ",{}]],"19":[["                                                                                                                                             ",{}]],"20":[["                                                                                                                                             ",{}]],"21":[["                                                                                                                                             ",{}]],"22":[["                                                                                                                                             ",{}]],"23":[["                                                                                                                                             ",{}]],"24":[["                                                                                                                                             ",{}]],"25":[["                                                                                                                                             ",{}]],"26":[["                                                                                                                                             ",{}]],"27":[["                                                                                                                                             ",{}]],"28":[["                                                                                                                                             ",{}]],"29":[["                                                                                                                                             ",{}]],"30":[["                                                                                                                                             ",{}]],"31":[["                                                                                                                                             ",{}]],"32":[["                                                                                                                                             ",{}]],"33":[["                                                                                                                                             ",{}]],"34":[["                                                                                                                                             ",{}]],"35":[["                                                                                                                                             ",{}]],"36":[["                                                                                                                                             ",{}]],"37":[["                                                                                                                                             ",{}]],"38":[["                                                                                                                                             ",{}]],"39":[["                                                                                                                                             ",{}]],"40":[["                                                                                                                                             ",{}]],"41":[["                                                                                                                                             ",{}]],"42":[["                                                                                                                                             ",{}]],"43":[["                                                                                                                                             ",{}]],"44":[["                                                                                                                                             ",{}]],"45":[["                                                                                                                                             ",{}]],"46":[["                                                                                                                                             ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":24,"y":0,"visible":true}}],[0.685489,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ e                                                                                                                    ",{}]]},"cursor":{"x":25}}],[0.161678,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ ex                                                                                                                   ",{}]]},"cursor":{"x":26}}],[0.110594,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ exp                                                                                                                  ",{}]]},"cursor":{"x":27}}],[0.055334,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ expo                                                                                                                 ",{}]]},"cursor":{"x":28}}],[0.07999299999999999,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ expor                                                                                                                ",{}]]},"cursor":{"x":29}}],[0.152206,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export                                                                                                               ",{}]]},"cursor":{"x":30}}],[0.30639,{"cursor":{"x":31}}],[0.191505,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export P                                                                                                             ",{}]]},"cursor":{"x":32}}],[0.053905,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PG                                                                                                            ",{}]]},"cursor":{"x":33}}],[0.145749,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX                                                                                                           ",{}]]},"cursor":{"x":34}}],[0.14258,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_                                                                                                          ",{}]]},"cursor":{"x":35}}],[0.210075,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_H                                                                                                         ",{}]]},"cursor":{"x":36}}],[0.054075,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_HO                                                                                                        ",{}]]},"cursor":{"x":37}}],[0.130235,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_HOM                                                                                                       ",{}]]},"cursor":{"x":38}}],[0.076946,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_HOME                                                                                                      ",{}]]},"cursor":{"x":39}}],[0.314814,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_HOME=                                                                                                     ",{}]]},"cursor":{"x":40}}],[0.165811,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_HOME=`                                                                                                    ",{}]]},"cursor":{"x":41}}],[0.177809,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_HOME=`p                                                                                                   ",{}]]},"cursor":{"x":42}}],[0.536458,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_HOME=`pw                                                                                                  ",{}]]},"cursor":{"x":43}}],[0.102133,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_HOME=`pwd                                                                                                 ",{}]]},"cursor":{"x":44}}],[0.273903,{"lines":{"0":[["ksc@ksc-desktop:~/demo$ export PGX_HOME=`pwd`                                                                                                ",{}]]},"cursor":{"x":45}}],[0.304126,{"cursor":{"x":0,"y":1}}],[0.001169,{"lines":{"1":[["ksc@ksc-desktop:~/demo$                                                                                                                      ",{}]]},"cursor":{"x":24}}],[0.612476,{"lines":{"1":[["ksc@ksc-desktop:~/demo$ .                                                                                                                    ",{}]]},"cursor":{"x":25}}],[0.18579,{"lines":{"1":[["ksc@ksc-desktop:~/demo$ ./                                                                                                                   ",{}]]},"cursor":{"x":26}}],[0.192131,{"lines":{"1":[["ksc@ksc-desktop:~/demo$ ./b                                                                                                                  ",{}]]},"cursor":{"x":27}}],[0.151475,{"lines":{"1":[["ksc@ksc-desktop:~/demo$ ./bin/                                                                                                               ",{}]]},"cursor":{"x":30}}],[0.216457,{"lines":{"1":[["ksc@ksc-desktop:~/demo$ ./bin/p                                                                                                              ",{}]]},"cursor":{"x":31}}],[0.158385,{"lines":{"1":[["ksc@ksc-desktop:~/demo$ ./bin/pgx                                                                                                            ",{}]]},"cursor":{"x":34}}],[0.111849,{"cursor":{"x":0,"y":2}}],[1.919596,{"lines":{"2":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[0.006976000000000004,{"lines":{"2":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :load /home/ksc/demo/conf/pgx.profile                                                                                               ",{}]]},"cursor":{"x":0,"y":3}}],[1.865648,{"lines":{"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[0.619832,{"lines":{"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.131553,{"lines":{"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :c                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.080539,{"lines":{"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :ca                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.152471,{"lines":{"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.103036,{"cursor":{"x":14}}],[1.613495,{"lines":{"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat h                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.090408,{"lines":{"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat he                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.216027,{"cursor":{"x":15}}],[0.0009700000000000001,{"lines":{"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat heroes.graphml                                                                                                                 ",{}]],"4":[["heroes.graphml.json    heroes.graphml                                                                                                        ",{}]],"5":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat heroes.graphml                                                                                                                 ",{}]]},"cursor":{"x":28,"y":5}}],[1.366008,{"lines":{"5":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat heroes.graphml.                                                                                                                ",{}]]},"cursor":{"x":29}}],[0.13448,{"lines":{"5":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat heroes.gr                                                                                                                      ",{}]]},"cursor":{"x":23}}],[0.003805,{"lines":{"5":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat heroes.graphml.json                                                                                                            ",{}]]},"cursor":{"x":34}}],[0.407546,{"cursor":{"x":0,"y":6}}],[0.01404,{"lines":{"6":[["===>",{"bold":true}],[" {                                                                                                                                       ",{}]],"7":[["  \"uri\": \"heroes.graphml\",                                                                                                                   ",{}]],"8":[["  \"format\": \"graphml\",                                                                                                                       ",{}]],"9":[["  \"node_props\": [{                                                                                                                           ",{}]],"10":[["    \"name\": \"id\",                                                                                                                            ",{}]],"11":[["    \"type\": \"string\"                                                                                                                         ",{}]],"12":[["  }],                                                                                                                                        ",{}]],"13":[["  \"edge_props\": [{                                                                                                                           ",{}]],"14":[["    \"name\": \"weight\",                                                                                                                        ",{}]],"15":[["    \"type\": \"double\"                                                                                                                         ",{}]],"16":[["  }],                                                                                                                                        ",{}]],"17":[["  \"node_id_type\": \"string\"                                                                                                                   ",{}]],"18":[["}                                                                                                                                            ",{}]],"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9,"y":20}}],[2.079498,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.227945,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :l                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.134044,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :lo                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.079901,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loa                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.096655,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :load                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.345907,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadG                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.18683,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGr                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.114685,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGra                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.505709,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGrap                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.078345,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGraph                                                                                                                          ",{}]]},"cursor":{"x":19}}],[0.079663,{"cursor":{"x":20}}],[1.445676,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGraph h                                                                                                                        ",{}]]},"cursor":{"x":21}}],[0.08216,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGraph he                                                                                                                       ",{}]]},"cursor":{"x":22}}],[0.222894,{"cursor":{"x":21}}],[0.00154,{"lines":{"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGraph heroes.graphml                                                                                                           ",{}]],"21":[["heroes.graphml.json    heroes.graphml                                                                                                        ",{}]],"22":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGraph heroes.graphml                                                                                                           ",{}]]},"cursor":{"x":34,"y":22}}],[0.91033,{"lines":{"22":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGraph heroes.graphml.                                                                                                          ",{}]]},"cursor":{"x":35}}],[0.082206,{"lines":{"22":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGraph heroes.graphml.json                                                                                                      ",{}]]},"cursor":{"x":40}}],[1.228644,{"lines":{"22":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :loadGraph heroes.graphml.json G                                                                                                    ",{}]]},"cursor":{"x":41}}],[0.237902,{"cursor":{"x":0,"y":23}}],[1.156763,{"lines":{"23":[["===>",{"bold":true}],[" {                                                                                                                                       ",{}]],"24":[["  \"graphName\" : \"G\",                                                                                                                         ",{}]],"25":[["  \"stats\" : {                                                                                                                                ",{}]],"26":[["    \"numNodes\" : 10469,                                                                                                                      ",{}]]},"cursor":{"y":27}}],[0.000614,{"lines":{"27":[["    \"numEdges\" : 178115,                                                                                                                     ",{}]],"28":[["    \"estimatedMemoryMegabytes\" : 1,                                                                                                          ",{}]],"29":[["    \"loadingTimeMillis\" : 746                                                                                                                ",{}]],"30":[["  },                                                                                                                                         ",{}]],"31":[["  \"nodeProperties\" : {                                                                                                                       ",{}]],"32":[["    \"id\" : \"string\"                                                                                                                          ",{}]],"33":[["  },                                                                                                                                         ",{}]],"34":[["  \"edgeProperties\" : {                                                                                                                       ",{}]],"35":[["    \"weight\" : \"double\"                                                                                                                      ",{}]],"36":[["  }                                                                                                                                          ",{}]],"37":[["}                                                                                                                                            ",{}]],"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9,"y":38}}],[2.093704,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.34792,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :c                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.184233,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cr                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.069783,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cre                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.07188700000000001,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :crea                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.063306,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :creat                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.08043400000000001,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.246358,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createM                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.089084,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMa                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.080681,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap                                                                                                                          ",{}]]},"cursor":{"x":19}}],[0.088825,{"cursor":{"x":20}}],[0.893523,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G                                                                                                                        ",{}]]},"cursor":{"x":21}}],[0.121779,{"cursor":{"x":22}}],[0.25036,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G S                                                                                                                      ",{}]]},"cursor":{"x":23}}],[0.134423,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G ST                                                                                                                     ",{}]]},"cursor":{"x":24}}],[0.193452,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STR                                                                                                                    ",{}]]},"cursor":{"x":25}}],[0.09356299999999999,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRI                                                                                                                   ",{}]]},"cursor":{"x":26}}],[0.056277,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRIN                                                                                                                  ",{}]]},"cursor":{"x":27}}],[0.087739,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING                                                                                                                 ",{}]]},"cursor":{"x":28}}],[0.773141,{"cursor":{"x":29}}],[0.21308,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING I                                                                                                               ",{}]]},"cursor":{"x":30}}],[0.069939,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING IN                                                                                                              ",{}]]},"cursor":{"x":31}}],[0.080134,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INT                                                                                                             ",{}]]},"cursor":{"x":32}}],[0.096105,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTE                                                                                                            ",{}]]},"cursor":{"x":33}}],[0.143529,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEG                                                                                                           ",{}]]},"cursor":{"x":34}}],[0.137635,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGE                                                                                                          ",{}]]},"cursor":{"x":35}}],[0.09478300000000001,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER                                                                                                         ",{}]]},"cursor":{"x":36}}],[0.205479,{"cursor":{"x":37}}],[0.156066,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER P                                                                                                       ",{}]]},"cursor":{"x":38}}],[0.109863,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PR                                                                                                      ",{}]]},"cursor":{"x":39}}],[0.144854,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRI                                                                                                     ",{}]]},"cursor":{"x":40}}],[0.192982,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIO                                                                                                    ",{}]]},"cursor":{"x":41}}],[0.41271,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIOR                                                                                                   ",{}]]},"cursor":{"x":42}}],[0.09755,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORI                                                                                                  ",{}]]},"cursor":{"x":43}}],[0.120912,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORIT                                                                                                 ",{}]]},"cursor":{"x":44}}],[0.103069,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY                                                                                                ",{}]]},"cursor":{"x":45}}],[0.299084,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_                                                                                               ",{}]]},"cursor":{"x":46}}],[0.175307,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_M                                                                                              ",{}]]},"cursor":{"x":47}}],[0.110096,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MA                                                                                             ",{}]]},"cursor":{"x":48}}],[0.531025,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX                                                                                            ",{}]]},"cursor":{"x":49}}],[0.279065,{"cursor":{"x":50}}],[0.151729,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX v                                                                                          ",{}]]},"cursor":{"x":51}}],[0.125942,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX vi                                                                                         ",{}]]},"cursor":{"x":52}}],[0.144215,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX vis                                                                                        ",{}]]},"cursor":{"x":53}}],[0.290134,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX visi                                                                                       ",{}]]},"cursor":{"x":54}}],[0.24498,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX visit                                                                                      ",{}]]},"cursor":{"x":55}}],[0.113253,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX visite                                                                                     ",{}]]},"cursor":{"x":56}}],[0.185718,{"lines":{"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX visited                                                                                    ",{}]]},"cursor":{"x":57}}],[0.093448,{"cursor":{"x":0,"y":39}}],[0.040644,{"lines":{"39":[["===>",{"bold":true}],[" visited                                                                                                                                 ",{}]],"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9,"y":40}}],[1.737794,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" n                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.124975,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" no                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.032261,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" nod                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.170823,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.352137,{"cursor":{"x":14}}],[0.10169,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node =                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.103665,{"cursor":{"x":16}}],[0.205749,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"                                                                                                                            ",{}]]},"cursor":{"x":17}}],[1.237085,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"S                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.110452,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SH                                                                                                                          ",{}]]},"cursor":{"x":19}}],[0.965911,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHA                                                                                                                         ",{}]]},"cursor":{"x":20}}],[0.097873,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHAN                                                                                                                        ",{}]]},"cursor":{"x":21}}],[0.143648,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG                                                                                                                       ",{}]]},"cursor":{"x":22}}],[0.586131,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG-                                                                                                                      ",{}]]},"cursor":{"x":23}}],[0.826662,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG-C                                                                                                                     ",{}]]},"cursor":{"x":24}}],[0.083076,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG-CH                                                                                                                    ",{}]]},"cursor":{"x":25}}],[0.063642,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG-CHI                                                                                                                   ",{}]]},"cursor":{"x":26}}],[0.631766,{"lines":{"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG-CHI\"                                                                                                                  ",{}]]},"cursor":{"x":27}}],[1.385641,{"cursor":{"x":0,"y":41}}],[0.02083,{"lines":{"41":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]]},"cursor":{"y":42}}],[0.000418,{"lines":{"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[2.407772,{"lines":{"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.204249,{"lines":{"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :c                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.094637,{"lines":{"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :ca                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.111209,{"lines":{"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.07113700000000001,{"cursor":{"x":14}}],[1.116356,{"lines":{"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat r                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.084396,{"lines":{"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat ra                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.128211,{"lines":{"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat ran                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.103221,{"lines":{"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat rand                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.229388,{"cursor":{"x":17}}],[0.002162,{"lines":{"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat random_walk_with_restart.gm                                                                                                    ",{}]]},"cursor":{"x":42}}],[0.747475,{"cursor":{"x":0,"y":43}}],[0.004229,{"lines":{"0":[["    \"id\" : \"string\"                                                                                                                          ",{}]],"1":[["  },                                                                                                                                         ",{}]],"2":[["  \"edgeProperties\" : {                                                                                                                       ",{}]],"3":[["    \"weight\" : \"double\"                                                                                                                      ",{}]],"4":[["  }                                                                                                                                          ",{}]],"5":[["}                                                                                                                                            ",{}]],"6":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX visited                                                                                    ",{}]],"7":[["===>",{"bold":true}],[" visited                                                                                                                                 ",{}]],"8":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG-CHI\"                                                                                                                  ",{}]],"9":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"10":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat random_walk_with_restart.gm                                                                                                    ",{}]],"11":[["===>",{"bold":true}],[" /*                                                                                                                                      ",{}]],"12":[["* Perform a egocentric random walk on the graph starting at 'source'.                                                                        ",{}]],"13":[["* At each node visited, the walk will jump back to 'source' with a probability of 'reset_prop' or if the node-degree is 0.                   ",{}]],"14":[["* if the walk does not jump back, it will choose a random outgoing edge and jump to the destination node.                                    ",{}]],"15":[["* The walk finishes after 'length' nodes have been visited (not necessarily distinct nodes).                                                 ",{}]],"16":[["*                                                                                                                                            ",{}]],"17":[["* Input:                                                                                                                                     ",{}]],"18":[["*       G:      The graph to work on.                                                                                                        ",{}]],"19":[["*       source: The node to start at.                                                                                                        ",{}]],"20":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"21":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"22":[["*                                                                                                                                            ",{}]],"23":[["* Output:                                                                                                                                    ",{}]],"24":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"25":[["*/                                                                                                                                           ",{}]],"26":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"27":[["                                                                                                                                             ",{}]],"28":[["        if(length <= 0) return;                                                                                                              ",{}]],"29":[["                                                                                                                                             ",{}]],"30":[["        node n = source;                                                                                                                     ",{}]],"31":[["        int current = 0;                                                                                                                     ",{}]],"32":[["                                                                                                                                             ",{}]],"33":[["        while(current < length) {                                                                                                            ",{}]],"34":[["                double beta = uniform();                                                                                                     ",{}]],"35":[["                                                                                                                                             ",{}]],"36":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"37":[["                        n = source;                                                                                                          ",{}]],"38":[["                } else {                                                                                                                     ",{}]],"39":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"40":[["                }                                                                                                                            ",{}]],"41":[["                visitationCount[n]++;                                                                                                        ",{}]],"42":[["                current++;                                                                                                                   ",{}]],"43":[["        }                                                                                                                                    ",{}]],"45":[["}                                                                                                                                            ",{}]],"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9,"y":47}}],[2.334927,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.172108,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :c                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.158082,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cm                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.096376,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cmo                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.498663,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cm                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.450029,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :c                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.14708,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :co                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.112107,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :com                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.07212300000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :comp                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.506029,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compi                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.133804,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compil                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.081968,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.109256,{"cursor":{"x":18}}],[1.678557,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile r                                                                                                                          ",{}]]},"cursor":{"x":19}}],[0.07416200000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile ra                                                                                                                         ",{}]]},"cursor":{"x":20}}],[0.159374,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile ran                                                                                                                        ",{}]]},"cursor":{"x":21}}],[0.140071,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]]},"cursor":{"x":46}}],[2.111067,{"lines":{"0":[["  },                                                                                                                                         ",{}]],"1":[["  \"edgeProperties\" : {                                                                                                                       ",{}]],"2":[["    \"weight\" : \"double\"                                                                                                                      ",{}]],"3":[["  }                                                                                                                                          ",{}]],"4":[["}                                                                                                                                            ",{}]],"5":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX visited                                                                                    ",{}]],"6":[["===>",{"bold":true}],[" visited                                                                                                                                 ",{}]],"7":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG-CHI\"                                                                                                                  ",{}]],"8":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"9":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat random_walk_with_restart.gm                                                                                                    ",{}]],"10":[["===>",{"bold":true}],[" /*                                                                                                                                      ",{}]],"11":[["* Perform a egocentric random walk on the graph starting at 'source'.                                                                        ",{}]],"12":[["* At each node visited, the walk will jump back to 'source' with a probability of 'reset_prop' or if the node-degree is 0.                   ",{}]],"13":[["* if the walk does not jump back, it will choose a random outgoing edge and jump to the destination node.                                    ",{}]],"14":[["* The walk finishes after 'length' nodes have been visited (not necessarily distinct nodes).                                                 ",{}]],"15":[["*                                                                                                                                            ",{}]],"16":[["* Input:                                                                                                                                     ",{}]],"17":[["*       G:      The graph to work on.                                                                                                        ",{}]],"18":[["*       source: The node to start at.                                                                                                        ",{}]],"19":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"20":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"21":[["*                                                                                                                                            ",{}]],"22":[["* Output:                                                                                                                                    ",{}]],"23":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"24":[["*/                                                                                                                                           ",{}]],"25":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"26":[["                                                                                                                                             ",{}]],"27":[["        if(length <= 0) return;                                                                                                              ",{}]],"28":[["                                                                                                                                             ",{}]],"29":[["        node n = source;                                                                                                                     ",{}]],"30":[["        int current = 0;                                                                                                                     ",{}]],"31":[["                                                                                                                                             ",{}]],"32":[["        while(current < length) {                                                                                                            ",{}]],"33":[["                double beta = uniform();                                                                                                     ",{}]],"34":[["                                                                                                                                             ",{}]],"35":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"36":[["                        n = source;                                                                                                          ",{}]],"37":[["                } else {                                                                                                                     ",{}]],"38":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"39":[["                }                                                                                                                            ",{}]],"40":[["                visitationCount[n]++;                                                                                                        ",{}]],"41":[["                current++;                                                                                                                   ",{}]],"42":[["        }                                                                                                                                    ",{}]],"43":[["                                                                                                                                             ",{}]],"44":[["}                                                                                                                                            ",{}]],"45":[["                                                                                                                                             ",{}]],"46":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.6625529999999999,{"lines":{"0":[["  \"edgeProperties\" : {                                                                                                                       ",{}]],"1":[["    \"weight\" : \"double\"                                                                                                                      ",{}]],"2":[["  }                                                                                                                                          ",{}]],"3":[["}                                                                                                                                            ",{}]],"4":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX visited                                                                                    ",{}]],"5":[["===>",{"bold":true}],[" visited                                                                                                                                 ",{}]],"6":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG-CHI\"                                                                                                                  ",{}]],"7":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"8":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat random_walk_with_restart.gm                                                                                                    ",{}]],"9":[["===>",{"bold":true}],[" /*                                                                                                                                      ",{}]],"10":[["* Perform a egocentric random walk on the graph starting at 'source'.                                                                        ",{}]],"11":[["* At each node visited, the walk will jump back to 'source' with a probability of 'reset_prop' or if the node-degree is 0.                   ",{}]],"12":[["* if the walk does not jump back, it will choose a random outgoing edge and jump to the destination node.                                    ",{}]],"13":[["* The walk finishes after 'length' nodes have been visited (not necessarily distinct nodes).                                                 ",{}]],"14":[["*                                                                                                                                            ",{}]],"15":[["* Input:                                                                                                                                     ",{}]],"16":[["*       G:      The graph to work on.                                                                                                        ",{}]],"17":[["*       source: The node to start at.                                                                                                        ",{}]],"18":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"19":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"20":[["*                                                                                                                                            ",{}]],"21":[["* Output:                                                                                                                                    ",{}]],"22":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"23":[["*/                                                                                                                                           ",{}]],"24":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"25":[["                                                                                                                                             ",{}]],"26":[["        if(length <= 0) return;                                                                                                              ",{}]],"27":[["                                                                                                                                             ",{}]],"28":[["        node n = source;                                                                                                                     ",{}]],"29":[["        int current = 0;                                                                                                                     ",{}]],"30":[["                                                                                                                                             ",{}]],"31":[["        while(current < length) {                                                                                                            ",{}]],"32":[["                double beta = uniform();                                                                                                     ",{}]],"33":[["                                                                                                                                             ",{}]],"34":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"35":[["                        n = source;                                                                                                          ",{}]],"36":[["                } else {                                                                                                                     ",{}]],"37":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"38":[["                }                                                                                                                            ",{}]],"39":[["                visitationCount[n]++;                                                                                                        ",{}]],"40":[["                current++;                                                                                                                   ",{}]],"41":[["        }                                                                                                                                    ",{}]],"42":[["                                                                                                                                             ",{}]],"43":[["}                                                                                                                                            ",{}]],"44":[["                                                                                                                                             ",{}]],"45":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"46":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]]}}],[0.000394,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[1.628212,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.180105,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.125781,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :he                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.120126,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :hel                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.194666,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.344208,{"cursor":{"x":15}}],[0.201098,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.24654,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :r                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.117371,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :ra                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.104744,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :ran                                                                                                                          ",{}]]},"cursor":{"x":19}}],[0.189716,{"cursor":{"x":18}}],[0.001291,{"lines":{"0":[["  }                                                                                                                                          ",{}]],"1":[["}                                                                                                                                            ",{}]],"2":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX visited                                                                                    ",{}]],"3":[["===>",{"bold":true}],[" visited                                                                                                                                 ",{}]],"4":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG-CHI\"                                                                                                                  ",{}]],"5":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"6":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat random_walk_with_restart.gm                                                                                                    ",{}]],"7":[["===>",{"bold":true}],[" /*                                                                                                                                      ",{}]],"8":[["* Perform a egocentric random walk on the graph starting at 'source'.                                                                        ",{}]],"9":[["* At each node visited, the walk will jump back to 'source' with a probability of 'reset_prop' or if the node-degree is 0.                   ",{}]],"10":[["* if the walk does not jump back, it will choose a random outgoing edge and jump to the destination node.                                    ",{}]],"11":[["* The walk finishes after 'length' nodes have been visited (not necessarily distinct nodes).                                                 ",{}]],"12":[["*                                                                                                                                            ",{}]],"13":[["* Input:                                                                                                                                     ",{}]],"14":[["*       G:      The graph to work on.                                                                                                        ",{}]],"15":[["*       source: The node to start at.                                                                                                        ",{}]],"16":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"17":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"18":[["*                                                                                                                                            ",{}]],"19":[["* Output:                                                                                                                                    ",{}]],"20":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"21":[["*/                                                                                                                                           ",{}]],"22":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"23":[["                                                                                                                                             ",{}]],"24":[["        if(length <= 0) return;                                                                                                              ",{}]],"26":[["        node n = source;                                                                                                                     ",{}]],"27":[["        int current = 0;                                                                                                                     ",{}]],"28":[["                                                                                                                                             ",{}]],"29":[["        while(current < length) {                                                                                                            ",{}]],"30":[["                double beta = uniform();                                                                                                     ",{}]],"31":[["                                                                                                                                             ",{}]],"32":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"33":[["                        n = source;                                                                                                          ",{}]],"34":[["                } else {                                                                                                                     ",{}]],"35":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"36":[["                }                                                                                                                            ",{}]],"37":[["                visitationCount[n]++;                                                                                                        ",{}]],"38":[["                current++;                                                                                                                   ",{}]],"39":[["        }                                                                                                                                    ",{}]],"40":[["                                                                                                                                             ",{}]],"41":[["}                                                                                                                                            ",{}]],"43":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"44":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"45":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"46":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]]},"cursor":{"x":22}}],[0.954838,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_                                                                                                                      ",{}]]},"cursor":{"x":23}}],[0.165273,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_w                                                                                                                     ",{}]]},"cursor":{"x":24}}],[0.191014,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :ra                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.001761,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]]},"cursor":{"x":41}}],[0.382616,{"lines":{"0":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createMap G STRING INTEGER PRIORITY_MAX visited                                                                                    ",{}]],"1":[["===>",{"bold":true}],[" visited                                                                                                                                 ",{}]],"2":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" node = \"SHANG-CHI\"                                                                                                                  ",{}]],"3":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"4":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cat random_walk_with_restart.gm                                                                                                    ",{}]],"5":[["===>",{"bold":true}],[" /*                                                                                                                                      ",{}]],"6":[["* Perform a egocentric random walk on the graph starting at 'source'.                                                                        ",{}]],"7":[["* At each node visited, the walk will jump back to 'source' with a probability of 'reset_prop' or if the node-degree is 0.                   ",{}]],"8":[["* if the walk does not jump back, it will choose a random outgoing edge and jump to the destination node.                                    ",{}]],"9":[["* The walk finishes after 'length' nodes have been visited (not necessarily distinct nodes).                                                 ",{}]],"10":[["*                                                                                                                                            ",{}]],"11":[["* Input:                                                                                                                                     ",{}]],"12":[["*       G:      The graph to work on.                                                                                                        ",{}]],"13":[["*       source: The node to start at.                                                                                                        ",{}]],"14":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"15":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"16":[["*                                                                                                                                            ",{}]],"17":[["* Output:                                                                                                                                    ",{}]],"18":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"19":[["*/                                                                                                                                           ",{}]],"20":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"21":[["                                                                                                                                             ",{}]],"22":[["        if(length <= 0) return;                                                                                                              ",{}]],"24":[["        node n = source;                                                                                                                     ",{}]],"25":[["        int current = 0;                                                                                                                     ",{}]],"26":[["                                                                                                                                             ",{}]],"27":[["        while(current < length) {                                                                                                            ",{}]],"28":[["                double beta = uniform();                                                                                                     ",{}]],"29":[["                                                                                                                                             ",{}]],"30":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"31":[["                        n = source;                                                                                                          ",{}]],"32":[["                } else {                                                                                                                     ",{}]],"33":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"34":[["                }                                                                                                                            ",{}]],"35":[["                visitationCount[n]++;                                                                                                        ",{}]],"36":[["                current++;                                                                                                                   ",{}]],"37":[["        }                                                                                                                                    ",{}]],"38":[["                                                                                                                                             ",{}]],"39":[["}                                                                                                                                            ",{}]],"41":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"42":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"43":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"44":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"45":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"46":[["                                                                                                                                             ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.004345,{"lines":{"0":[["* Perform a egocentric random walk on the graph starting at 'source'.                                                                        ",{}]],"1":[["* At each node visited, the walk will jump back to 'source' with a probability of 'reset_prop' or if the node-degree is 0.                   ",{}]],"2":[["* if the walk does not jump back, it will choose a random outgoing edge and jump to the destination node.                                    ",{}]],"3":[["* The walk finishes after 'length' nodes have been visited (not necessarily distinct nodes).                                                 ",{}]],"4":[["*                                                                                                                                            ",{}]],"5":[["* Input:                                                                                                                                     ",{}]],"6":[["*       G:      The graph to work on.                                                                                                        ",{}]],"7":[["*       source: The node to start at.                                                                                                        ",{}]],"8":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"9":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"11":[["* Output:                                                                                                                                    ",{}]],"12":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"13":[["*/                                                                                                                                           ",{}]],"14":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"15":[["                                                                                                                                             ",{}]],"16":[["        if(length <= 0) return;                                                                                                              ",{}]],"17":[["                                                                                                                                             ",{}]],"18":[["        node n = source;                                                                                                                     ",{}]],"19":[["        int current = 0;                                                                                                                     ",{}]],"20":[["                                                                                                                                             ",{}]],"21":[["        while(current < length) {                                                                                                            ",{}]],"22":[["                double beta = uniform();                                                                                                     ",{}]],"24":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"25":[["                        n = source;                                                                                                          ",{}]],"26":[["                } else {                                                                                                                     ",{}]],"27":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"28":[["                }                                                                                                                            ",{}]],"29":[["                visitationCount[n]++;                                                                                                        ",{}]],"30":[["                current++;                                                                                                                   ",{}]],"31":[["        }                                                                                                                                    ",{}]],"32":[["                                                                                                                                             ",{}]],"33":[["}                                                                                                                                            ",{}]],"34":[["                                                                                                                                             ",{}]],"35":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"36":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"37":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"38":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"39":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"41":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"42":[["                                                                                                                                             ",{}]],"43":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"44":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"45":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[2.65068,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.252435,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :r                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.085684,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :ra                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.130281,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :ran                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.093802,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :rand                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.160051,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :rando                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.112246,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.515728,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.174025,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_w                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.141558,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_wa                                                                                                                          ",{}]]},"cursor":{"x":19}}],[0.221897,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_w                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.002229,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart                                                                                                           ",{}]]},"cursor":{"x":35}}],[2.046246,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G                                                                                                         ",{}]]},"cursor":{"x":36}}],[0.170121,{"cursor":{"x":37}}],[0.418162,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G ~                                                                                                       ",{}]]},"cursor":{"x":38}}],[0.603355,{"cursor":{"x":37}}],[0.000105,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G                                                                                                         ",{}]]}}],[0.332451,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !                                                                                                       ",{}]]},"cursor":{"x":38}}],[0.295781,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !n                                                                                                      ",{}]]},"cursor":{"x":39}}],[0.093657,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !no                                                                                                     ",{}]]},"cursor":{"x":40}}],[0.056125,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !nod                                                                                                    ",{}]]},"cursor":{"x":41}}],[0.138272,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node                                                                                                   ",{}]]},"cursor":{"x":42}}],[1.059813,{"cursor":{"x":43}}],[0.44461,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 2                                                                                                 ",{}]]},"cursor":{"x":44}}],[0.125028,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 20                                                                                                ",{}]]},"cursor":{"x":45}}],[0.136466,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200                                                                                               ",{}]]},"cursor":{"x":46}}],[0.25807,{"cursor":{"x":47}}],[0.179799,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0                                                                                             ",{}]]},"cursor":{"x":48}}],[0.236407,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.                                                                                            ",{}]]},"cursor":{"x":49}}],[0.827407,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.1                                                                                           ",{}]]},"cursor":{"x":50}}],[0.074241,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15                                                                                          ",{}]]},"cursor":{"x":51}}],[0.153848,{"cursor":{"x":52}}],[0.352446,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 v                                                                                        ",{}]]},"cursor":{"x":53}}],[0.117307,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 vi                                                                                       ",{}]]},"cursor":{"x":54}}],[0.136474,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 vis                                                                                      ",{}]]},"cursor":{"x":55}}],[0.135674,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visi                                                                                     ",{}]]},"cursor":{"x":56}}],[0.509805,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visit                                                                                    ",{}]]},"cursor":{"x":57}}],[0.090559,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visite                                                                                   ",{}]]},"cursor":{"x":58}}],[0.170735,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]]},"cursor":{"x":59}}],[0.546017,{"lines":{"0":[["* At each node visited, the walk will jump back to 'source' with a probability of 'reset_prop' or if the node-degree is 0.                   ",{}]],"1":[["* if the walk does not jump back, it will choose a random outgoing edge and jump to the destination node.                                    ",{}]],"2":[["* The walk finishes after 'length' nodes have been visited (not necessarily distinct nodes).                                                 ",{}]],"3":[["*                                                                                                                                            ",{}]],"4":[["* Input:                                                                                                                                     ",{}]],"5":[["*       G:      The graph to work on.                                                                                                        ",{}]],"6":[["*       source: The node to start at.                                                                                                        ",{}]],"7":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"8":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"9":[["*                                                                                                                                            ",{}]],"10":[["* Output:                                                                                                                                    ",{}]],"11":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"12":[["*/                                                                                                                                           ",{}]],"13":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"14":[["                                                                                                                                             ",{}]],"15":[["        if(length <= 0) return;                                                                                                              ",{}]],"16":[["                                                                                                                                             ",{}]],"17":[["        node n = source;                                                                                                                     ",{}]],"18":[["        int current = 0;                                                                                                                     ",{}]],"19":[["                                                                                                                                             ",{}]],"20":[["        while(current < length) {                                                                                                            ",{}]],"21":[["                double beta = uniform();                                                                                                     ",{}]],"22":[["                                                                                                                                             ",{}]],"23":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"24":[["                        n = source;                                                                                                          ",{}]],"25":[["                } else {                                                                                                                     ",{}]],"26":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"27":[["                }                                                                                                                            ",{}]],"28":[["                visitationCount[n]++;                                                                                                        ",{}]],"29":[["                current++;                                                                                                                   ",{}]],"30":[["        }                                                                                                                                    ",{}]],"31":[["                                                                                                                                             ",{}]],"32":[["}                                                                                                                                            ",{}]],"33":[["                                                                                                                                             ",{}]],"34":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"35":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"36":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"37":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"39":[["                                                                                                                                             ",{}]],"40":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"41":[["                                                                                                                                             ",{}]],"42":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"43":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"44":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"45":[["                                                                                                                                             ",{}]],"46":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.028184,{"lines":{"0":[["* if the walk does not jump back, it will choose a random outgoing edge and jump to the destination node.                                    ",{}]],"1":[["* The walk finishes after 'length' nodes have been visited (not necessarily distinct nodes).                                                 ",{}]],"2":[["*                                                                                                                                            ",{}]],"3":[["* Input:                                                                                                                                     ",{}]],"4":[["*       G:      The graph to work on.                                                                                                        ",{}]],"5":[["*       source: The node to start at.                                                                                                        ",{}]],"6":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"7":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"8":[["*                                                                                                                                            ",{}]],"9":[["* Output:                                                                                                                                    ",{}]],"10":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"11":[["*/                                                                                                                                           ",{}]],"12":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"13":[["                                                                                                                                             ",{}]],"14":[["        if(length <= 0) return;                                                                                                              ",{}]],"15":[["                                                                                                                                             ",{}]],"16":[["        node n = source;                                                                                                                     ",{}]],"17":[["        int current = 0;                                                                                                                     ",{}]],"18":[["                                                                                                                                             ",{}]],"19":[["        while(current < length) {                                                                                                            ",{}]],"20":[["                double beta = uniform();                                                                                                     ",{}]],"21":[["                                                                                                                                             ",{}]],"22":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"23":[["                        n = source;                                                                                                          ",{}]],"24":[["                } else {                                                                                                                     ",{}]],"25":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"26":[["                }                                                                                                                            ",{}]],"27":[["                visitationCount[n]++;                                                                                                        ",{}]],"28":[["                current++;                                                                                                                   ",{}]],"29":[["        }                                                                                                                                    ",{}]],"30":[["                                                                                                                                             ",{}]],"31":[["}                                                                                                                                            ",{}]],"32":[["                                                                                                                                             ",{}]],"33":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"34":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"35":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"36":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"37":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"38":[["                                                                                                                                             ",{}]],"39":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"40":[["                                                                                                                                             ",{}]],"41":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"42":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"43":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"44":[["                                                                                                                                             ",{}]],"45":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"46":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]]}}],[0.036864,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[2.191405,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.172738,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :c                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.423953,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cr                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.086229,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cre                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.07115100000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :crea                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.121754,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :creat                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.053992,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.26981,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createC                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.098789,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCo                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.1764,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCol                                                                                                                          ",{}]]},"cursor":{"x":19}}],[0.164895,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection                                                                                                                   ",{}]]},"cursor":{"x":27}}],[1.743499,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G                                                                                                                 ",{}]]},"cursor":{"x":28}}],[0.173726,{"cursor":{"x":29}}],[0.2797,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G S                                                                                                               ",{}]]},"cursor":{"x":30}}],[0.077916,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SE                                                                                                              ",{}]]},"cursor":{"x":31}}],[0.07190299999999999,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET                                                                                                             ",{}]]},"cursor":{"x":32}}],[0.128707,{"cursor":{"x":33}}],[0.285342,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET N                                                                                                           ",{}]]},"cursor":{"x":34}}],[0.130297,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NO                                                                                                          ",{}]]},"cursor":{"x":35}}],[0.08780200000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NOD                                                                                                         ",{}]]},"cursor":{"x":36}}],[0.594541,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE                                                                                                        ",{}]]},"cursor":{"x":37}}],[0.563255,{"cursor":{"x":38}}],[0.154677,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE c                                                                                                      ",{}]]},"cursor":{"x":39}}],[0.113028,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE ci                                                                                                     ",{}]]},"cursor":{"x":40}}],[0.159249,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE cir                                                                                                    ",{}]]},"cursor":{"x":41}}],[0.273448,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circ                                                                                                   ",{}]]},"cursor":{"x":42}}],[0.141699,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circl                                                                                                  ",{}]]},"cursor":{"x":43}}],[0.11992,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circle                                                                                                 ",{}]]},"cursor":{"x":44}}],[0.326031,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleO                                                                                                ",{}]]},"cursor":{"x":45}}],[0.113836,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOf                                                                                               ",{}]]},"cursor":{"x":46}}],[0.298917,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfT                                                                                              ",{}]]},"cursor":{"x":47}}],[0.35918,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTr                                                                                             ",{}]]},"cursor":{"x":48}}],[0.062018,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTru                                                                                            ",{}]]},"cursor":{"x":49}}],[0.365897,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrus                                                                                           ",{}]]},"cursor":{"x":50}}],[0.066528,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]]},"cursor":{"x":51}}],[0.153482,{"lines":{"0":[["* The walk finishes after 'length' nodes have been visited (not necessarily distinct nodes).                                                 ",{}]],"1":[["*                                                                                                                                            ",{}]],"2":[["* Input:                                                                                                                                     ",{}]],"3":[["*       G:      The graph to work on.                                                                                                        ",{}]],"4":[["*       source: The node to start at.                                                                                                        ",{}]],"5":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"6":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"7":[["*                                                                                                                                            ",{}]],"8":[["* Output:                                                                                                                                    ",{}]],"9":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"10":[["*/                                                                                                                                           ",{}]],"11":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"12":[["                                                                                                                                             ",{}]],"13":[["        if(length <= 0) return;                                                                                                              ",{}]],"14":[["                                                                                                                                             ",{}]],"15":[["        node n = source;                                                                                                                     ",{}]],"16":[["        int current = 0;                                                                                                                     ",{}]],"17":[["                                                                                                                                             ",{}]],"18":[["        while(current < length) {                                                                                                            ",{}]],"19":[["                double beta = uniform();                                                                                                     ",{}]],"20":[["                                                                                                                                             ",{}]],"21":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"22":[["                        n = source;                                                                                                          ",{}]],"23":[["                } else {                                                                                                                     ",{}]],"24":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"25":[["                }                                                                                                                            ",{}]],"26":[["                visitationCount[n]++;                                                                                                        ",{}]],"27":[["                current++;                                                                                                                   ",{}]],"28":[["        }                                                                                                                                    ",{}]],"29":[["                                                                                                                                             ",{}]],"30":[["}                                                                                                                                            ",{}]],"31":[["                                                                                                                                             ",{}]],"32":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"33":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"34":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"35":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"36":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"37":[["                                                                                                                                             ",{}]],"38":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"39":[["                                                                                                                                             ",{}]],"40":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"41":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"42":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"43":[["                                                                                                                                             ",{}]],"44":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"45":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"46":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.029879,{"lines":{"0":[["*                                                                                                                                            ",{}]],"1":[["* Input:                                                                                                                                     ",{}]],"2":[["*       G:      The graph to work on.                                                                                                        ",{}]],"3":[["*       source: The node to start at.                                                                                                        ",{}]],"4":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"5":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"6":[["*                                                                                                                                            ",{}]],"7":[["* Output:                                                                                                                                    ",{}]],"8":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"9":[["*/                                                                                                                                           ",{}]],"10":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"11":[["                                                                                                                                             ",{}]],"12":[["        if(length <= 0) return;                                                                                                              ",{}]],"13":[["                                                                                                                                             ",{}]],"14":[["        node n = source;                                                                                                                     ",{}]],"15":[["        int current = 0;                                                                                                                     ",{}]],"16":[["                                                                                                                                             ",{}]],"17":[["        while(current < length) {                                                                                                            ",{}]],"18":[["                double beta = uniform();                                                                                                     ",{}]],"19":[["                                                                                                                                             ",{}]],"20":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"21":[["                        n = source;                                                                                                          ",{}]],"22":[["                } else {                                                                                                                     ",{}]],"23":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"24":[["                }                                                                                                                            ",{}]],"25":[["                visitationCount[n]++;                                                                                                        ",{}]],"26":[["                current++;                                                                                                                   ",{}]],"27":[["        }                                                                                                                                    ",{}]],"28":[["                                                                                                                                             ",{}]],"29":[["}                                                                                                                                            ",{}]],"30":[["                                                                                                                                             ",{}]],"31":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"32":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"33":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"34":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"35":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"36":[["                                                                                                                                             ",{}]],"37":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"38":[["                                                                                                                                             ",{}]],"39":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"40":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"41":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"42":[["                                                                                                                                             ",{}]],"43":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"44":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"45":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"46":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[2.453896,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.212762,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :e                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.176111,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :ex                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.400041,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :ext                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.595153,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extr                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.149067,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap                                                                                                                 ",{}]]},"cursor":{"x":29}}],[1.706212,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap v                                                                                                               ",{}]]},"cursor":{"x":30}}],[0.123475,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap vi                                                                                                              ",{}]]},"cursor":{"x":31}}],[0.111383,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap vis                                                                                                             ",{}]]},"cursor":{"x":32}}],[0.120135,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visi                                                                                                            ",{}]]},"cursor":{"x":33}}],[0.136161,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visit                                                                                                           ",{}]]},"cursor":{"x":34}}],[0.112585,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visite                                                                                                          ",{}]]},"cursor":{"x":35}}],[0.185472,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited                                                                                                         ",{}]]},"cursor":{"x":36}}],[0.168261,{"cursor":{"x":37}}],[0.187845,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited c                                                                                                       ",{}]]},"cursor":{"x":38}}],[0.145981,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited ci                                                                                                      ",{}]]},"cursor":{"x":39}}],[0.09540800000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited cir                                                                                                     ",{}]]},"cursor":{"x":40}}],[0.234958,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circ                                                                                                    ",{}]]},"cursor":{"x":41}}],[0.159017,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circl                                                                                                   ",{}]]},"cursor":{"x":42}}],[0.13465,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circle                                                                                                  ",{}]]},"cursor":{"x":43}}],[0.453154,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleO                                                                                                 ",{}]]},"cursor":{"x":44}}],[0.162979,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOf                                                                                                ",{}]]},"cursor":{"x":45}}],[0.265695,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfT                                                                                               ",{}]]},"cursor":{"x":46}}],[0.416257,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTr                                                                                              ",{}]]},"cursor":{"x":47}}],[0.117717,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTru                                                                                             ",{}]]},"cursor":{"x":48}}],[0.162509,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrus                                                                                            ",{}]]},"cursor":{"x":49}}],[0.06945900000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust                                                                                           ",{}]]},"cursor":{"x":50}}],[0.720746,{"cursor":{"x":51}}],[0.428769,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 1                                                                                         ",{}]]},"cursor":{"x":52}}],[0.090506,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]]},"cursor":{"x":53}}],[1.269093,{"lines":{"0":[["* Input:                                                                                                                                     ",{}]],"1":[["*       G:      The graph to work on.                                                                                                        ",{}]],"2":[["*       source: The node to start at.                                                                                                        ",{}]],"3":[["*       reset_prob:     The probability to jump back to the source node. Should be in [0, 1) to produce meaningful results.                  ",{}]],"4":[["*       length: The number of nodes visited by the random walk before it finishes.                                                           ",{}]],"5":[["*                                                                                                                                            ",{}]],"6":[["* Output:                                                                                                                                    ",{}]],"7":[["*       visitationCount: a mapping from node-id to the number of times the node has been visited during the walk.                            ",{}]],"8":[["*/                                                                                                                                           ",{}]],"9":[["procedure random_walk_with_restart(G: graph, source: node, length: int, reset_prob: double; visitationCount: map<node, int>)  {              ",{}]],"10":[["                                                                                                                                             ",{}]],"11":[["        if(length <= 0) return;                                                                                                              ",{}]],"12":[["                                                                                                                                             ",{}]],"13":[["        node n = source;                                                                                                                     ",{}]],"14":[["        int current = 0;                                                                                                                     ",{}]],"15":[["                                                                                                                                             ",{}]],"16":[["        while(current < length) {                                                                                                            ",{}]],"17":[["                double beta = uniform();                                                                                                     ",{}]],"18":[["                                                                                                                                             ",{}]],"19":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"20":[["                        n = source;                                                                                                          ",{}]],"21":[["                } else {                                                                                                                     ",{}]],"22":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"23":[["                }                                                                                                                            ",{}]],"24":[["                visitationCount[n]++;                                                                                                        ",{}]],"25":[["                current++;                                                                                                                   ",{}]],"26":[["        }                                                                                                                                    ",{}]],"27":[["                                                                                                                                             ",{}]],"28":[["}                                                                                                                                            ",{}]],"29":[["                                                                                                                                             ",{}]],"30":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"31":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"32":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"33":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"34":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"35":[["                                                                                                                                             ",{}]],"36":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"37":[["                                                                                                                                             ",{}]],"38":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"39":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"40":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"41":[["                                                                                                                                             ",{}]],"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"43":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"44":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"45":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"46":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.048166,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[2.032654,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.129712,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :c                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[1.638733,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.130235,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[0.241628,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.591986,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.484089,{"cursor":{"x":12}}],[0.195865,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.176208,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :c                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.207751,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :cr                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.061668,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :cre                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.114329,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :crea                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.118398,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :creat                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.07080699999999999,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :create                                                                                                                          ",{}]]},"cursor":{"x":19}}],[0.54199,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createB                                                                                                                         ",{}]]},"cursor":{"x":20}}],[0.138557,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBi                                                                                                                        ",{}]]},"cursor":{"x":21}}],[0.520502,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]]},"cursor":{"x":48}}],[0.643355,{"lines":{"0":[["        int current = 0;                                                                                                                     ",{}]],"1":[["                                                                                                                                             ",{}]],"2":[["        while(current < length) {                                                                                                            ",{}]],"3":[["                double beta = uniform();                                                                                                     ",{}]],"4":[["                                                                                                                                             ",{}]],"5":[["                if(beta < reset_prob || n.degree() == 0) {                                                                                   ",{}]],"6":[["                        n = source;                                                                                                          ",{}]],"7":[["                } else {                                                                                                                     ",{}]],"8":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"9":[["                }                                                                                                                            ",{}]],"10":[["                visitationCount[n]++;                                                                                                        ",{}]],"11":[["                current++;                                                                                                                   ",{}]],"12":[["        }                                                                                                                                    ",{}]],"13":[["                                                                                                                                             ",{}]],"14":[["}                                                                                                                                            ",{}]],"16":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"17":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"18":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"19":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"21":[["                                                                                                                                             ",{}]],"22":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"23":[["                                                                                                                                             ",{}]],"24":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"25":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"26":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"28":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"29":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"30":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"31":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"32":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"33":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"34":[["                                                                                                                                             ",{}]],"35":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"36":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"38":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"39":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"40":[["graphName - source graph                                                                                                                     ",{}]],"41":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"42":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"43":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"44":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"45":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"46":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"47":[["raph. If the argument is null, a new                                                                                                         ",{}]]},"cursor":{"x":37}}],[3.2e-05,{"lines":{"0":[["                } else {                                                                                                                     ",{}]],"1":[["                        n = n.pickRandomNbr();                                                                                               ",{}]],"2":[["                }                                                                                                                            ",{}]],"3":[["                visitationCount[n]++;                                                                                                        ",{}]],"4":[["                current++;                                                                                                                   ",{}]],"5":[["        }                                                                                                                                    ",{}]],"6":[["                                                                                                                                             ",{}]],"7":[["}                                                                                                                                            ",{}]],"8":[["                                                                                                                                             ",{}]],"9":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"10":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"11":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"12":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"13":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"14":[["                                                                                                                                             ",{}]],"15":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"16":[["                                                                                                                                             ",{}]],"17":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"18":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"19":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"20":[["                                                                                                                                             ",{}]],"21":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"22":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"23":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"24":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"25":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"26":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"28":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"29":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"30":[["                                                                                                                                             ",{}]],"31":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"32":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"33":[["graphName - source graph                                                                                                                     ",{}]],"34":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"35":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"36":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"37":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"38":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"39":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"40":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"41":[["ode property names in the result.                                                                                                            ",{}]],"42":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"43":[["rty, followed by updated edge property names                                                                                                 ",{}]],"44":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"45":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"46":[["                                                                                                                                             ",{}]],"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[2.146121,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.204293,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :c                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.248325,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cr                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.045073,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cre                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.09612800000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :crea                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.246975,{"lines":{"0":[["                visitationCount[n]++;                                                                                                        ",{}]],"1":[["                current++;                                                                                                                   ",{}]],"2":[["        }                                                                                                                                    ",{}]],"3":[["                                                                                                                                             ",{}]],"4":[["}                                                                                                                                            ",{}]],"5":[["                                                                                                                                             ",{}]],"6":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"7":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"8":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"9":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"10":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"11":[["                                                                                                                                             ",{}]],"12":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"13":[["                                                                                                                                             ",{}]],"14":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"15":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"16":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"17":[["                                                                                                                                             ",{}]],"18":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"19":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"21":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"22":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"23":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"24":[["                                                                                                                                             ",{}]],"25":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"26":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"28":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"29":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"30":[["graphName - source graph                                                                                                                     ",{}]],"31":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"32":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"33":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"34":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"35":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"36":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"37":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"38":[["ode property names in the result.                                                                                                            ",{}]],"39":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"40":[["rty, followed by updated edge property names                                                                                                 ",{}]],"41":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"42":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"43":[["                                                                                                                                             ",{}]],"44":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"45":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"46":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.926028,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createB                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.106813,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBi                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.131885,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet                                                                                                 ",{}]]},"cursor":{"x":45}}],[1.919357,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G                                                                                               ",{}]]},"cursor":{"x":46}}],[0.101191,{"cursor":{"x":47}}],[0.087695,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G n                                                                                             ",{}]]},"cursor":{"x":48}}],[0.168826,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G nu                                                                                            ",{}]]},"cursor":{"x":49}}],[0.08035200000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G nul                                                                                           ",{}]]},"cursor":{"x":50}}],[0.121294,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null                                                                                          ",{}]]},"cursor":{"x":51}}],[0.078101,{"cursor":{"x":52}}],[0.08840000000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null n                                                                                        ",{}]]},"cursor":{"x":53}}],[0.151569,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null nu                                                                                       ",{}]]},"cursor":{"x":54}}],[0.071728,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null nul                                                                                      ",{}]]},"cursor":{"x":55}}],[0.133027,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null                                                                                     ",{}]]},"cursor":{"x":56}}],[0.106822,{"cursor":{"x":57}}],[0.8506590000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null c                                                                                   ",{}]]},"cursor":{"x":58}}],[0.111578,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null ci                                                                                  ",{}]]},"cursor":{"x":59}}],[0.102588,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null cir                                                                                 ",{}]]},"cursor":{"x":60}}],[0.450429,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circ                                                                                ",{}]]},"cursor":{"x":61}}],[0.263367,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circl                                                                               ",{}]]},"cursor":{"x":62}}],[0.133969,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circle                                                                              ",{}]]},"cursor":{"x":63}}],[0.324798,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleO                                                                             ",{}]]},"cursor":{"x":64}}],[0.138723,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOf                                                                            ",{}]]},"cursor":{"x":65}}],[0.282535,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfT                                                                           ",{}]]},"cursor":{"x":66}}],[0.215738,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTr                                                                          ",{}]]},"cursor":{"x":67}}],[0.118242,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTru                                                                         ",{}]]},"cursor":{"x":68}}],[0.13592,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrus                                                                        ",{}]]},"cursor":{"x":69}}],[0.055692,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust                                                                       ",{}]]},"cursor":{"x":70}}],[0.674714,{"cursor":{"x":71}}],[0.215861,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust B                                                                     ",{}]]},"cursor":{"x":72}}],[0.069629,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG                                                                    ",{}]]},"cursor":{"x":73}}],[0.418269,{"cursor":{"x":74}}],[0.125407,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG i                                                                  ",{}]]},"cursor":{"x":75}}],[0.080221,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG is                                                                 ",{}]]},"cursor":{"x":76}}],[0.284681,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isH                                                                ",{}]]},"cursor":{"x":77}}],[0.155473,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHu                                                               ",{}]]},"cursor":{"x":78}}],[0.13605,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]]},"cursor":{"x":79}}],[0.514679,{"lines":{"0":[["                current++;                                                                                                                   ",{}]],"1":[["        }                                                                                                                                    ",{}]],"2":[["                                                                                                                                             ",{}]],"3":[["}                                                                                                                                            ",{}]],"4":[["                                                                                                                                             ",{}]],"5":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"6":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"7":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"8":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"9":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"10":[["                                                                                                                                             ",{}]],"11":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"12":[["                                                                                                                                             ",{}]],"13":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"14":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"15":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"16":[["                                                                                                                                             ",{}]],"17":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"18":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"19":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"20":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"21":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"22":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"23":[["                                                                                                                                             ",{}]],"24":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"25":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"26":[["                                                                                                                                             ",{}]],"27":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"28":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"29":[["graphName - source graph                                                                                                                     ",{}]],"30":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"31":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"32":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"33":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"34":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"35":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"36":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"37":[["ode property names in the result.                                                                                                            ",{}]],"38":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"39":[["rty, followed by updated edge property names                                                                                                 ",{}]],"40":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"41":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"42":[["                                                                                                                                             ",{}]],"43":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"44":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"45":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"46":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.121461,{"lines":{"0":[["        }                                                                                                                                    ",{}]],"1":[["                                                                                                                                             ",{}]],"2":[["}                                                                                                                                            ",{}]],"3":[["                                                                                                                                             ",{}]],"4":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"5":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"6":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"7":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"8":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"9":[["                                                                                                                                             ",{}]],"10":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"11":[["                                                                                                                                             ",{}]],"12":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"13":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"14":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"15":[["                                                                                                                                             ",{}]],"16":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"17":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"18":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"19":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"21":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"22":[["                                                                                                                                             ",{}]],"23":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"24":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"25":[["                                                                                                                                             ",{}]],"26":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"27":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"28":[["graphName - source graph                                                                                                                     ",{}]],"29":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"30":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"31":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"32":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"33":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"34":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"35":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"36":[["ode property names in the result.                                                                                                            ",{}]],"37":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"38":[["rty, followed by updated edge property names                                                                                                 ",{}]],"39":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"40":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"41":[["                                                                                                                                             ",{}]],"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"43":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"44":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"45":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"46":[["===>",{"bold":true}],[" [BG, isHub]                                                                                                                             ",{}]],"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[1.880064,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.189424,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :c                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.207656,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cr                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.07058200000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :cre                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.087989,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :crea                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.09593599999999999,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :creat                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.07106800000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]]},"cursor":{"x":16}}],[0.374723,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createC                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.097788,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCo                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.152639,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCol                                                                                                                          ",{}]]},"cursor":{"x":19}}],[0.09896199999999999,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection                                                                                                                   ",{}]]},"cursor":{"x":27}}],[1.282707,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G                                                                                                                 ",{}]]},"cursor":{"x":28}}],[0.137855,{"cursor":{"x":29}}],[0.210278,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G S                                                                                                               ",{}]]},"cursor":{"x":30}}],[0.086273,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SE                                                                                                              ",{}]]},"cursor":{"x":31}}],[0.289691,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQ                                                                                                             ",{}]]},"cursor":{"x":32}}],[0.102412,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQU                                                                                                            ",{}]]},"cursor":{"x":33}}],[0.152134,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUE                                                                                                           ",{}]]},"cursor":{"x":34}}],[0.177987,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUEN                                                                                                          ",{}]]},"cursor":{"x":35}}],[0.109061,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENC                                                                                                         ",{}]]},"cursor":{"x":36}}],[0.080509,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE                                                                                                        ",{}]]},"cursor":{"x":37}}],[0.786407,{"cursor":{"x":38}}],[0.219011,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE N                                                                                                      ",{}]]},"cursor":{"x":39}}],[0.081923,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NO                                                                                                     ",{}]]},"cursor":{"x":40}}],[0.07266300000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NOD                                                                                                    ",{}]]},"cursor":{"x":41}}],[0.168105,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE                                                                                                   ",{}]]},"cursor":{"x":42}}],[0.135745,{"cursor":{"x":43}}],[0.225777,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE h                                                                                                 ",{}]]},"cursor":{"x":44}}],[0.184281,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hu                                                                                                ",{}]]},"cursor":{"x":45}}],[0.211731,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]]},"cursor":{"x":46}}],[0.391482,{"lines":{"0":[["                                                                                                                                             ",{}]],"1":[["}                                                                                                                                            ",{}]],"2":[["                                                                                                                                             ",{}]],"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"4":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"5":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"6":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"7":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"8":[["                                                                                                                                             ",{}]],"9":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"10":[["                                                                                                                                             ",{}]],"11":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"12":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"13":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"14":[["                                                                                                                                             ",{}]],"15":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"16":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"17":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"18":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"19":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"20":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"21":[["                                                                                                                                             ",{}]],"22":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"23":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"24":[["                                                                                                                                             ",{}]],"25":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"26":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"27":[["graphName - source graph                                                                                                                     ",{}]],"28":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"29":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"30":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"31":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"32":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"33":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"34":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"35":[["ode property names in the result.                                                                                                            ",{}]],"36":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"37":[["rty, followed by updated edge property names                                                                                                 ",{}]],"38":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"39":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"40":[["                                                                                                                                             ",{}]],"41":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"42":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"43":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"44":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"45":[["===>",{"bold":true}],[" [BG, isHub]                                                                                                                             ",{}]],"46":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.018337,{"lines":{"0":[["}                                                                                                                                            ",{}]],"1":[["                                                                                                                                             ",{}]],"2":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"3":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"4":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"5":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"6":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"7":[["                                                                                                                                             ",{}]],"8":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"9":[["                                                                                                                                             ",{}]],"10":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"11":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"12":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"13":[["                                                                                                                                             ",{}]],"14":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"15":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"16":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"17":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"18":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"19":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"20":[["                                                                                                                                             ",{}]],"21":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"22":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"23":[["                                                                                                                                             ",{}]],"24":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"25":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"26":[["graphName - source graph                                                                                                                     ",{}]],"27":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"28":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"29":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"30":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"31":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"32":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"33":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"34":[["ode property names in the result.                                                                                                            ",{}]],"35":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"36":[["rty, followed by updated edge property names                                                                                                 ",{}]],"37":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"38":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"39":[["                                                                                                                                             ",{}]],"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"41":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"42":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"43":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"44":[["===>",{"bold":true}],[" [BG, isHub]                                                                                                                             ",{}]],"45":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]],"46":[["===>",{"bold":true}],[" hub                                                                                                                                     ",{}]],"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[0.822342,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]]},"cursor":{"x":46}}],[0.773017,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hu                                                                                                ",{}]]},"cursor":{"x":45}}],[0.167588,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE h                                                                                                 ",{}]]},"cursor":{"x":44}}],[0.36393,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE                                                                                                   ",{}]]},"cursor":{"x":43}}],[0.347796,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE a                                                                                                 ",{}]]},"cursor":{"x":44}}],[0.102099,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE au                                                                                                ",{}]]},"cursor":{"x":45}}],[0.135846,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE aut                                                                                               ",{}]]},"cursor":{"x":46}}],[0.04755,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE auth                                                                                              ",{}]]},"cursor":{"x":47}}],[0.796866,{"lines":{"0":[["                                                                                                                                             ",{}]],"1":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"2":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"4":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"5":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"6":[["                                                                                                                                             ",{}]],"7":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"8":[["                                                                                                                                             ",{}]],"9":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"10":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"11":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"12":[["                                                                                                                                             ",{}]],"13":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"14":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"15":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"16":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"17":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"18":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"19":[["                                                                                                                                             ",{}]],"20":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"21":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"22":[["                                                                                                                                             ",{}]],"23":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"24":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"25":[["graphName - source graph                                                                                                                     ",{}]],"26":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"27":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"28":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"29":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"30":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"31":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"32":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"33":[["ode property names in the result.                                                                                                            ",{}]],"34":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"35":[["rty, followed by updated edge property names                                                                                                 ",{}]],"36":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"37":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"38":[["                                                                                                                                             ",{}]],"39":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"40":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"41":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"43":[["===>",{"bold":true}],[" [BG, isHub]                                                                                                                             ",{}]],"44":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]],"45":[["===>",{"bold":true}],[" hub                                                                                                                                     ",{}]],"46":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE auth                                                                                              ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.048053,{"lines":{"0":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :compile random_walk_with_restart.gm                                                                                                ",{}]],"1":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"2":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"3":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"4":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"5":[["                                                                                                                                             ",{}]],"6":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"7":[["                                                                                                                                             ",{}]],"8":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"9":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"10":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"11":[["                                                                                                                                             ",{}]],"12":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"13":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"14":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"15":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"16":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"17":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"18":[["                                                                                                                                             ",{}]],"19":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"20":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"21":[["                                                                                                                                             ",{}]],"22":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"23":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"24":[["graphName - source graph                                                                                                                     ",{}]],"25":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"26":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"27":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"28":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"29":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"30":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"31":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"32":[["ode property names in the result.                                                                                                            ",{}]],"33":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"34":[["rty, followed by updated edge property names                                                                                                 ",{}]],"35":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"36":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"37":[["                                                                                                                                             ",{}]],"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"39":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"40":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"41":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"42":[["===>",{"bold":true}],[" [BG, isHub]                                                                                                                             ",{}]],"43":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]],"44":[["===>",{"bold":true}],[" hub                                                                                                                                     ",{}]],"45":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE auth                                                                                              ",{}]],"46":[["===>",{"bold":true}],[" auth                                                                                                                                    ",{}]],"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[0.65733,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.236398,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :s                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.215894,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :sa                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.118213,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :sal                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.103415,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salc                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.5179009999999999,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :sal                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.025424,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :sals                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.355104,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa                                                                                                                              ",{}]]},"cursor":{"x":15}}],[0.077866,{"cursor":{"x":16}}],[1.47762,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa B                                                                                                                            ",{}]]},"cursor":{"x":17}}],[0.097621,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG                                                                                                                           ",{}]]},"cursor":{"x":18}}],[0.112235,{"cursor":{"x":19}}],[0.26649,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG i                                                                                                                         ",{}]]},"cursor":{"x":20}}],[0.061673,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG is                                                                                                                        ",{}]]},"cursor":{"x":21}}],[0.338627,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isH                                                                                                                       ",{}]]},"cursor":{"x":22}}],[0.159411,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHu                                                                                                                      ",{}]]},"cursor":{"x":23}}],[0.133841,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub                                                                                                                     ",{}]]},"cursor":{"x":24}}],[1.462206,{"cursor":{"x":25}}],[0.404741,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0                                                                                                                   ",{}]]},"cursor":{"x":26}}],[0.215509,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.                                                                                                                  ",{}]]},"cursor":{"x":27}}],[0.696613,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.8                                                                                                                 ",{}]]},"cursor":{"x":28}}],[0.08611000000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85                                                                                                                ",{}]]},"cursor":{"x":29}}],[0.345961,{"cursor":{"x":30}}],[0.671424,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 3                                                                                                              ",{}]]},"cursor":{"x":31}}],[0.086508,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30                                                                                                             ",{}]]},"cursor":{"x":32}}],[0.153406,{"cursor":{"x":33}}],[0.834917,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1                                                                                                           ",{}]]},"cursor":{"x":34}}],[0.643081,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 10                                                                                                          ",{}]]},"cursor":{"x":35}}],[0.153966,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 100                                                                                                         ",{}]]},"cursor":{"x":36}}],[0.174269,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000                                                                                                        ",{}]]},"cursor":{"x":37}}],[0.179832,{"cursor":{"x":38}}],[0.213793,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0                                                                                                      ",{}]]},"cursor":{"x":39}}],[0.232231,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.                                                                                                     ",{}]]},"cursor":{"x":40}}],[0.728626,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.0                                                                                                    ",{}]]},"cursor":{"x":41}}],[0.677679,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01                                                                                                   ",{}]]},"cursor":{"x":42}}],[0.249725,{"cursor":{"x":43}}],[0.144209,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 h                                                                                                 ",{}]]},"cursor":{"x":44}}],[0.1172,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hu                                                                                                ",{}]]},"cursor":{"x":45}}],[0.152434,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hub                                                                                               ",{}]]},"cursor":{"x":46}}],[0.103582,{"cursor":{"x":47}}],[0.234349,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hub a                                                                                             ",{}]]},"cursor":{"x":48}}],[0.102357,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hub au                                                                                            ",{}]]},"cursor":{"x":49}}],[0.143569,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hub aut                                                                                           ",{}]]},"cursor":{"x":50}}],[0.023423,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hub auth                                                                                          ",{}]]},"cursor":{"x":51}}],[1.510054,{"lines":{"0":[["===>",{"bold":true}],[" Compilation successful. ",{}],[":random_walk_with_restart",{"bold":true}],[" added as command. Type ",{}],["help :random_walk_with_restart",{"bold":true}],[" to see how to invoke it.        ",{}]],"1":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"2":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"3":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"4":[["                                                                                                                                             ",{}]],"5":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"6":[["                                                                                                                                             ",{}]],"7":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"8":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"9":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"10":[["                                                                                                                                             ",{}]],"11":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"12":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"13":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"14":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"15":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"16":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"17":[["                                                                                                                                             ",{}]],"18":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"19":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"20":[["                                                                                                                                             ",{}]],"21":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"22":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"23":[["graphName - source graph                                                                                                                     ",{}]],"24":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"25":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"26":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"27":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"28":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"29":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"30":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"31":[["ode property names in the result.                                                                                                            ",{}]],"32":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"33":[["rty, followed by updated edge property names                                                                                                 ",{}]],"34":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"35":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"36":[["                                                                                                                                             ",{}]],"37":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"38":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"39":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"41":[["===>",{"bold":true}],[" [BG, isHub]                                                                                                                             ",{}]],"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]],"43":[["===>",{"bold":true}],[" hub                                                                                                                                     ",{}]],"44":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE auth                                                                                              ",{}]],"45":[["===>",{"bold":true}],[" auth                                                                                                                                    ",{}]],"46":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hub auth                                                                                          ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.065562,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[1.613857,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.517171,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :c                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.09396599999999999,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :co                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.143969,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :col                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.09024799999999999,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :collectionProxy                                                                                                                    ",{}]]},"cursor":{"x":26}}],[1.09145,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :collectionProxy a                                                                                                                  ",{}]]},"cursor":{"x":27}}],[0.106632,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :collectionProxy au                                                                                                                 ",{}]]},"cursor":{"x":28}}],[0.127625,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :collectionProxy aut                                                                                                                ",{}]]},"cursor":{"x":29}}],[0.064398,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :collectionProxy auth                                                                                                               ",{}]]},"cursor":{"x":30}}],[0.192916,{"lines":{"0":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random                                                                                                                       ",{}]],"1":[[":randomWalkWithRestart      :random_walk_with_restart                                                                                        ",{}]],"2":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :help :random_walk_with_restart                                                                                                     ",{}]],"3":[["                                                                                                                                             ",{}]],"4":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"5":[["                                                                                                                                             ",{}]],"6":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"7":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"8":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"9":[["                                                                                                                                             ",{}]],"10":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"11":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"12":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"13":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"14":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"15":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"16":[["                                                                                                                                             ",{}]],"17":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"18":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"19":[["                                                                                                                                             ",{}]],"20":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"21":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"22":[["graphName - source graph                                                                                                                     ",{}]],"23":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"24":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"25":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"26":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"27":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"28":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"29":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"30":[["ode property names in the result.                                                                                                            ",{}]],"31":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"32":[["rty, followed by updated edge property names                                                                                                 ",{}]],"33":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"34":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"35":[["                                                                                                                                             ",{}]],"36":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"37":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"38":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"39":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"40":[["===>",{"bold":true}],[" [BG, isHub]                                                                                                                             ",{}]],"41":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]],"42":[["===>",{"bold":true}],[" hub                                                                                                                                     ",{}]],"43":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE auth                                                                                              ",{}]],"44":[["===>",{"bold":true}],[" auth                                                                                                                                    ",{}]],"45":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hub auth                                                                                          ",{}]],"46":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :collectionProxy auth                                                                                                               ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.018468,{"lines":{"47":[["===>",{"bold":true}],[" [,\"INVISIBLE WOMAN/SUE, ,\"WASP/JANET VAN DYNE, ,\"JONES, NELL, STARSHINE II/BRANDY, SUNSPOT/ROBERTO DACO, ,\"SCARLET W                    ",{}]]},"cursor":{"x":121}}],[0.0006559999999999999,{"lines":{"0":[["usage: ",{}],[":random_walk_with_restart",{"bold":true}],[" <GRAPH> <NODE_KEY> <INT> <DOUBLE> <MAP>                                                                     ",{}]],"1":[["                                                                                                                                             ",{}]],"2":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"3":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"4":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"6":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"7":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"8":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"9":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"10":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"11":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"12":[["                                                                                                                                             ",{}]],"13":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"14":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"15":[["                                                                                                                                             ",{}]],"16":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"17":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"18":[["graphName - source graph                                                                                                                     ",{}]],"19":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"20":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"21":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"22":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"23":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"24":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"25":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"26":[["ode property names in the result.                                                                                                            ",{}]],"27":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"28":[["rty, followed by updated edge property names                                                                                                 ",{}]],"29":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"30":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"31":[["                                                                                                                                             ",{}]],"32":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"33":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"34":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"35":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"36":[["===>",{"bold":true}],[" [BG, isHub]                                                                                                                             ",{}]],"37":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]],"38":[["===>",{"bold":true}],[" hub                                                                                                                                     ",{}]],"39":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE auth                                                                                              ",{}]],"40":[["===>",{"bold":true}],[" auth                                                                                                                                    ",{}]],"41":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hub auth                                                                                          ",{}]],"42":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :collectionProxy auth                                                                                                               ",{}]],"43":[["===>",{"bold":true}],[" [,\"INVISIBLE WOMAN/SUE, ,\"WASP/JANET VAN DYNE, ,\"JONES, NELL, STARSHINE II/BRANDY, SUNSPOT/ROBERTO DACO, ,\"SCARLET WITCH/WANDA, TRAVELLE",{}]],"44":[["R, DR. JUDAS, JONES, GABE, ARIES/MARCUS LASSITE, BORROUGHS, CHARLES C, ,\"MORGAN, JERROLD JERR, MAN-THING/THEODORE T, ,\"BEETLE/ABNER RONALD, R",{}]],"45":[["OM, SPACEKNIGHT, FU MANCHU, GRIMM, JAKE, LORD CHAOS, NAMORITA/NITA PRENTI, SPEEDBALL/ROBBIE BAL, DOCTOR DREDD, SILVER SURFER/NORRIN, JONES, D",{}]],"46":[["ANIEL DANNY, ,\"JONES, GABE, EEL/LEOPOLD STRYKE, ,\"JACK, SUB-MARINER/NAMOR MA, SERGEI, LOBO, SMITH, SIR DENIS NAY, WU, LEIKO]                 ",{}]],"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],["                                                                                                                                     ",{}]]},"cursor":{"x":9}}],[9.472103000000001,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :                                                                                                                                   ",{}]]},"cursor":{"x":10}}],[0.097803,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :e                                                                                                                                  ",{}]]},"cursor":{"x":11}}],[0.169368,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :ex                                                                                                                                 ",{}]]},"cursor":{"x":12}}],[0.176146,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :exi                                                                                                                                ",{}]]},"cursor":{"x":13}}],[0.127997,{"lines":{"47":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :exit                                                                                                                               ",{}]]},"cursor":{"x":14}}],[0.686472,{"lines":{"0":[["                                                                                                                                             ",{}]],"1":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"2":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"3":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"4":[["                                                                                                                                             ",{}]],"5":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"6":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"7":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"8":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"9":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"10":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"11":[["                                                                                                                                             ",{}]],"12":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"13":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"14":[["                                                                                                                                             ",{}]],"15":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"16":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"17":[["graphName - source graph                                                                                                                     ",{}]],"18":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"19":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"20":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"21":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"22":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"23":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"24":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"25":[["ode property names in the result.                                                                                                            ",{}]],"26":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"27":[["rty, followed by updated edge property names                                                                                                 ",{}]],"28":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"29":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"30":[["                                                                                                                                             ",{}]],"31":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"32":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"33":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"34":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"35":[["===>",{"bold":true}],[" [BG, isHub]                                                                                                                             ",{}]],"36":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]],"37":[["===>",{"bold":true}],[" hub                                                                                                                                     ",{}]],"38":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE auth                                                                                              ",{}]],"39":[["===>",{"bold":true}],[" auth                                                                                                                                    ",{}]],"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hub auth                                                                                          ",{}]],"41":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :collectionProxy auth                                                                                                               ",{}]],"42":[["===>",{"bold":true}],[" [,\"INVISIBLE WOMAN/SUE, ,\"WASP/JANET VAN DYNE, ,\"JONES, NELL, STARSHINE II/BRANDY, SUNSPOT/ROBERTO DACO, ,\"SCARLET WITCH/WANDA, TRAVELLE",{}]],"43":[["R, DR. JUDAS, JONES, GABE, ARIES/MARCUS LASSITE, BORROUGHS, CHARLES C, ,\"MORGAN, JERROLD JERR, MAN-THING/THEODORE T, ,\"BEETLE/ABNER RONALD, R",{}]],"44":[["OM, SPACEKNIGHT, FU MANCHU, GRIMM, JAKE, LORD CHAOS, NAMORITA/NITA PRENTI, SPEEDBALL/ROBBIE BAL, DOCTOR DREDD, SILVER SURFER/NORRIN, JONES, D",{}]],"45":[["ANIEL DANNY, ,\"JONES, GABE, EEL/LEOPOLD STRYKE, ,\"JACK, SUB-MARINER/NAMOR MA, SERGEI, LOBO, SMITH, SIR DENIS NAY, WU, LEIKO]                 ",{}]],"46":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :exit                                                                                                                               ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}],[0.345219,{"lines":{"47":[["ksc@ksc-desktop:~/demo$                                                                                                                      ",{}]]},"cursor":{"x":24}}],[2.122134,{"lines":{"0":[["runs user-compiled ",{}],["random_walk_with_restart",{"bold":true}],[" algorithm and waits for result.                                                                  ",{}]],"1":[["Returns: ",{}],["Void",{"bold":true}],["                                                                                                                                ",{}]],"2":[["Equivalent Java API",{"fg":2}],[": Core#",{}],["runAnalysis",{"bold":true}],["(_sessionId, \"random_walk_with_restart\", Argument[] args, ...)                                          ",{}]],"3":[["                                                                                                                                             ",{}]],"4":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :random_walk_with_restart G !node 200 0.15 visited                                                                                  ",{}]],"5":[["===>",{"bold":true}],[" SHANG-CHI                                                                                                                               ",{}]],"6":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SET NODE circleOfTrust                                                                                          ",{}]],"7":[["===>",{"bold":true}],[" circleOfTrust                                                                                                                           ",{}]],"8":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :extractTopKFromMap visited circleOfTrust 10                                                                                        ",{}]],"9":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :h :createBipartiteSubgraphFromLeftSet                                                                                              ",{}]],"10":[["                                                                                                                                             ",{}]],"11":[["usage: ",{}],[":createBipartiteSubgraphFromLeftSet",{"bold":true}],[" <String graphName> <java.util.List<java.lang.String> nodePropNames> <java.util.List<java.lang.Stri",{}]],"12":[["ng> edgePropNames> <String nodeSetName> <String newGraphName> <String isLeftPropName>                                                        ",{}]],"13":[["                                                                                                                                             ",{}]],"14":[["Create a (session-bound and transient) bipartite version of a graph.                                                                         ",{}]],"15":[["Arguments:",{"bold":true}],["                                                                                                                                   ",{}]],"16":[["graphName - source graph                                                                                                                     ",{}]],"17":[["nodePropNames - list of node property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"18":[["edgePropNames - list of edge property names belonging to graph specified by graph to be transformed as well                                  ",{}]],"19":[["nodeSetName - node set name representing the left side                                                                                       ",{}]],"20":[["newGraphName - name of the new graph. If null, a name will be generated.                                                                     ",{}]],"21":[["isLeftPropName - after the method finishes, the name that will be associated with a boolean property that will contain the          informati",{}]],"22":[["on whether a node is in the left side of the bipartite subgraph. The name must not be a name of          an existing node property for this g",{}]],"23":[["raph. If the argument is null, a new unique name will be created. In          either way, the property name will be the last element of the n",{}]],"24":[["ode property names in the result.                                                                                                            ",{}]],"25":[["Returns:",{"bold":true}],[" list holding resulting graph at index 0, followed by updated node property names including the name for the         new isLeft prope",{}]],"26":[["rty, followed by updated edge property names                                                                                                 ",{}]],"27":[["Equivalent Java API",{"fg":2}],[": PgxFuture<List> Core#",{}],["createBipartiteSubgraphFromLeftSet",{"bold":true}],["(String sessionId, String graphName, java.util.List<java.lang.Str",{}]],"28":[["ing> nodePropNames, java.util.List<java.lang.String> edgePropNames, String nodeSetName, String newGraphName, String isLeftPropName)          ",{}]],"29":[["                                                                                                                                             ",{}]],"30":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :create                                                                                                                             ",{}]],"31":[[":createNodeProperty                    :createEdgeProperty                    :createCollection                                              ",{}]],"32":[[":createMap                             :createBipartiteSubgraphFromLeftSet                                                                   ",{}]],"33":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createBipartiteSubgraphFromLeftSet G null null circleOfTrust BG isHub                                                              ",{}]],"34":[["===>",{"bold":true}],[" [BG, isHub]                                                                                                                             ",{}]],"35":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE hub                                                                                               ",{}]],"36":[["===>",{"bold":true}],[" hub                                                                                                                                     ",{}]],"37":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :createCollection G SEQUENCE NODE auth                                                                                              ",{}]],"38":[["===>",{"bold":true}],[" auth                                                                                                                                    ",{}]],"39":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :salsa BG isHub 0.85 30 1000 0.01 hub auth                                                                                          ",{}]],"40":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :collectionProxy auth                                                                                                               ",{}]],"41":[["===>",{"bold":true}],[" [,\"INVISIBLE WOMAN/SUE, ,\"WASP/JANET VAN DYNE, ,\"JONES, NELL, STARSHINE II/BRANDY, SUNSPOT/ROBERTO DACO, ,\"SCARLET WITCH/WANDA, TRAVELLE",{}]],"42":[["R, DR. JUDAS, JONES, GABE, ARIES/MARCUS LASSITE, BORROUGHS, CHARLES C, ,\"MORGAN, JERROLD JERR, MAN-THING/THEODORE T, ,\"BEETLE/ABNER RONALD, R",{}]],"43":[["OM, SPACEKNIGHT, FU MANCHU, GRIMM, JAKE, LORD CHAOS, NAMORITA/NITA PRENTI, SPEEDBALL/ROBBIE BAL, DOCTOR DREDD, SILVER SURFER/NORRIN, JONES, D",{}]],"44":[["ANIEL DANNY, ,\"JONES, GABE, EEL/LEOPOLD STRYKE, ,\"JACK, SUB-MARINER/NAMOR MA, SERGEI, LOBO, SMITH, SIR DENIS NAY, WU, LEIKO]                 ",{}]],"45":[["pgx:",{"bold":true}],["000",{}],[">",{"bold":true}],[" :exit                                                                                                                               ",{}]],"46":[["ksc@ksc-desktop:~/demo$ exit                                                                                                                 ",{}]],"47":[["                                                                                                                                             ",{}]]},"cursor":{"x":0}}]]