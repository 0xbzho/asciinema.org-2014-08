[[0.712376,{"lines":{"0":[["bash-3.2$                                                                       ",{}]],"1":[["                                                                                ",{}]],"2":[["                                                                                ",{}]],"3":[["                                                                                ",{}]],"4":[["                                                                                ",{}]],"5":[["                                                                                ",{}]],"6":[["                                                                                ",{}]],"7":[["                                                                                ",{}]],"8":[["                                                                                ",{}]],"9":[["                                                                                ",{}]],"10":[["                                                                                ",{}]],"11":[["                                                                                ",{}]],"12":[["                                                                                ",{}]],"13":[["                                                                                ",{}]],"14":[["                                                                                ",{}]],"15":[["                                                                                ",{}]],"16":[["                                                                                ",{}]],"17":[["                                                                                ",{}]],"18":[["                                                                                ",{}]],"19":[["                                                                                ",{}]],"20":[["                                                                                ",{}]],"21":[["                                                                                ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                                                ",{}]],"24":[["                                                                                ",{}]]},"cursor":{"x":10,"y":0,"visible":true}}],[0.442882,{"lines":{"0":[["bash-3.2$ p                                                                     ",{}]]},"cursor":{"x":11}}],[0.072071,{"lines":{"0":[["bash-3.2$ py                                                                    ",{}]]},"cursor":{"x":12}}],[0.055942,{"lines":{"0":[["bash-3.2$ pyt                                                                   ",{}]]},"cursor":{"x":13}}],[0.048015,{"lines":{"0":[["bash-3.2$ pyth                                                                  ",{}]]},"cursor":{"x":14}}],[0.047941,{"lines":{"0":[["bash-3.2$ pytho                                                                 ",{}]]},"cursor":{"x":15}}],[0.031654,{"lines":{"0":[["bash-3.2$ python                                                                ",{}]]},"cursor":{"x":16}}],[0.336512,{"cursor":{"x":0,"y":1}}],[0.024136,{"lines":{"1":[["Python 2.7.5 (default, Nov 26 2013, 10:28:53)                                   ",{}]],"2":[["[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin                ",{}]],"3":[["Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.          ",{}]]},"cursor":{"y":4}}],[0.031071,{"lines":{"4":[[">>>                                                                             ",{}]]},"cursor":{"x":4}}],[0.712242,{"lines":{"4":[[">>> s                                                                           ",{}]]},"cursor":{"x":5}}],[0.072557,{"cursor":{"x":6}}],[0.095711,{"lines":{"4":[[">>> s =                                                                         ",{}]]},"cursor":{"x":7}}],[0.04739,{"cursor":{"x":8}}],[0.616611,{"lines":{"4":[[">>> s = \"                                                                       ",{}]]},"cursor":{"x":9}}],[0.655601,{"lines":{"4":[[">>> s = \"H                                                                      ",{}]]},"cursor":{"x":10}}],[0.135804,{"lines":{"4":[[">>> s = \"Hi                                                                     ",{}]]},"cursor":{"x":11}}],[0.056655,{"cursor":{"x":12}}],[0.119519,{"lines":{"4":[[">>> s = \"Hi t                                                                   ",{}]]},"cursor":{"x":13}}],[0.040082,{"lines":{"4":[[">>> s = \"Hi th                                                                  ",{}]]},"cursor":{"x":14}}],[0.111578,{"lines":{"4":[[">>> s = \"Hi the                                                                 ",{}]]},"cursor":{"x":15}}],[0.064022,{"lines":{"4":[[">>> s = \"Hi ther                                                                ",{}]]},"cursor":{"x":16}}],[0.079792,{"lines":{"4":[[">>> s = \"Hi there                                                               ",{}]]},"cursor":{"x":17}}],[0.28064,{"lines":{"4":[[">>> s = \"Hi there!                                                              ",{}]]},"cursor":{"x":18}}],[0.183977,{"cursor":{"x":19}}],[0.152132,{"lines":{"4":[[">>> s = \"Hi there! I                                                            ",{}]]},"cursor":{"x":20}}],[0.15979,{"lines":{"4":[[">>> s = \"Hi there! I'                                                           ",{}]]},"cursor":{"x":21}}],[0.055899,{"lines":{"4":[[">>> s = \"Hi there! I'm                                                          ",{}]]},"cursor":{"x":22}}],[0.05571,{"cursor":{"x":23}}],[0.648541,{"lines":{"4":[[">>> s = \"Hi there! I'm T                                                        ",{}]]},"cursor":{"x":24}}],[0.104012,{"lines":{"4":[[">>> s = \"Hi there! I'm To                                                       ",{}]]},"cursor":{"x":25}}],[0.047399,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom                                                      ",{}]]},"cursor":{"x":26}}],[0.200197,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom,                                                     ",{}]]},"cursor":{"x":27}}],[0.06514300000000001,{"cursor":{"x":28}}],[0.135593,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, a                                                   ",{}]]},"cursor":{"x":29}}],[0.064029,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, an                                                  ",{}]]},"cursor":{"x":30}}],[0.119786,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and                                                 ",{}]]},"cursor":{"x":31}}],[0.055301,{"cursor":{"x":32}}],[0.152574,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I                                               ",{}]]},"cursor":{"x":33}}],[0.056074,{"cursor":{"x":34}}],[0.175991,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I l                                             ",{}]]},"cursor":{"x":35}}],[0.024358,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I li                                            ",{}]]},"cursor":{"x":36}}],[0.167637,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I lik                                           ",{}]]},"cursor":{"x":37}}],[0.071644,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I like                                          ",{}]]},"cursor":{"x":38}}],[0.056556,{"cursor":{"x":39}}],[0.175903,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I like R                                        ",{}]]},"cursor":{"x":40}}],[0.06408,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I like RE                                       ",{}]]},"cursor":{"x":41}}],[0.063568,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I like REP                                      ",{}]]},"cursor":{"x":42}}],[0.048657,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I like REPL                                     ",{}]]},"cursor":{"x":43}}],[0.11951,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I like REPLS                                    ",{}]]},"cursor":{"x":44}}],[0.615567,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I like REPL                                     ",{}]]},"cursor":{"x":43}}],[0.128623,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I like REPLs                                    ",{}]]},"cursor":{"x":44}}],[0.743719,{"lines":{"4":[[">>> s = \"Hi there! I'm Tom, and I like REPLs\"                                   ",{}]]},"cursor":{"x":45}}],[0.425481,{"cursor":{"x":0,"y":5}}],[0.000307,{"lines":{"5":[[">>>                                                                             ",{}]]},"cursor":{"x":4}}],[0.486043,{"lines":{"5":[[">>> s                                                                           ",{}]]},"cursor":{"x":5}}],[0.104227,{"lines":{"5":[[">>> s.                                                                          ",{}]]},"cursor":{"x":6}}],[0.224729,{"lines":{"5":[[">>> s.s                                                                         ",{}]]},"cursor":{"x":7}}],[0.047088,{"lines":{"5":[[">>> s.sp                                                                        ",{}]]},"cursor":{"x":8}}],[0.088438,{"lines":{"5":[[">>> s.spl                                                                       ",{}]]},"cursor":{"x":9}}],[0.175514,{"lines":{"5":[[">>> s.spli                                                                      ",{}]]},"cursor":{"x":10}}],[0.079751,{"lines":{"5":[[">>> s.split                                                                     ",{}]]},"cursor":{"x":11}}],[0.176696,{"lines":{"5":[[">>> s.split(                                                                    ",{}]]},"cursor":{"x":12}}],[0.055431,{"lines":{"5":[[">>> s.split()                                                                   ",{}]]},"cursor":{"x":13}}],[0.344757,{"cursor":{"x":0,"y":6}}],[0.000373,{"lines":{"6":[["['Hi', 'there!', \"I'm\", 'Tom,', 'and', 'I', 'like', 'REPLs']                    ",{}]],"7":[[">>>                                                                             ",{}]]},"cursor":{"x":4,"y":7}}],[1.222552,{"lines":{"7":[[">>> s                                                                           ",{}]]},"cursor":{"x":5}}],[0.464492,{"lines":{"7":[[">>>                                                                             ",{}]]},"cursor":{"x":4}}],[0.112405,{"lines":{"7":[[">>> s                                                                           ",{}]]},"cursor":{"x":5}}],[0.104229,{"lines":{"7":[[">>> so                                                                          ",{}]]},"cursor":{"x":6}}],[0.095813,{"lines":{"7":[[">>> sor                                                                         ",{}]]},"cursor":{"x":7}}],[0.135192,{"lines":{"7":[[">>> sort                                                                        ",{}]]},"cursor":{"x":8}}],[0.080982,{"lines":{"7":[[">>> sorte                                                                       ",{}]]},"cursor":{"x":9}}],[0.142743,{"lines":{"7":[[">>> sorted                                                                      ",{}]]},"cursor":{"x":10}}],[0.208797,{"lines":{"7":[[">>> sorted(                                                                     ",{}]]},"cursor":{"x":11}}],[0.256264,{"lines":{"7":[[">>> sorted(s                                                                    ",{}]]},"cursor":{"x":12}}],[0.391566,{"lines":{"7":[[">>> sorted(s.                                                                   ",{}]]},"cursor":{"x":13}}],[0.167558,{"lines":{"7":[[">>> sorted(s.s                                                                  ",{}]]},"cursor":{"x":14}}],[0.08044,{"lines":{"7":[[">>> sorted(s.sp                                                                 ",{}]]},"cursor":{"x":15}}],[0.088286,{"lines":{"7":[[">>> sorted(s.spl                                                                ",{}]]},"cursor":{"x":16}}],[0.208255,{"lines":{"7":[[">>> sorted(s.spli                                                               ",{}]]},"cursor":{"x":17}}],[0.11083,{"lines":{"7":[[">>> sorted(s.split                                                              ",{}]]},"cursor":{"x":18}}],[0.240884,{"lines":{"7":[[">>> sorted(s.split)                                                             ",{}]]},"cursor":{"x":19}}],[0.488245,{"lines":{"7":[[">>> sorted(s.split                                                              ",{}]]},"cursor":{"x":18}}],[0.224021,{"lines":{"7":[[">>> sorted(s.split(                                                             ",{}]]},"cursor":{"x":19}}],[0.087878,{"lines":{"7":[[">>> sorted(s.split()                                                            ",{}]]},"cursor":{"x":20}}],[0.263844,{"lines":{"7":[[">>> sorted(s.split())                                                           ",{}]]},"cursor":{"x":21}}],[0.360156,{"cursor":{"x":0,"y":8}}],[0.000364,{"lines":{"8":[["['Hi', 'I', \"I'm\", 'REPLs', 'Tom,', 'and', 'like', 'there!']                    ",{}]],"9":[[">>>                                                                             ",{}]]},"cursor":{"x":4,"y":9}}],[2.711617,{"lines":{"9":[[">>> d                                                                           ",{}]]},"cursor":{"x":5}}],[0.07093000000000001,{"lines":{"9":[[">>> di                                                                          ",{}]]},"cursor":{"x":6}}],[0.097358,{"lines":{"9":[[">>> dir                                                                         ",{}]]},"cursor":{"x":7}}],[0.183565,{"lines":{"9":[[">>> dir(                                                                        ",{}]]},"cursor":{"x":8}}],[0.152132,{"lines":{"9":[[">>> dir(s                                                                       ",{}]]},"cursor":{"x":9}}],[0.231998,{"lines":{"9":[[">>> dir(s)                                                                      ",{}]]},"cursor":{"x":10}}],[0.256054,{"cursor":{"x":0,"y":10}}],[0.000639,{"lines":{"10":[["['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__",{}]],"11":[["format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__get",{}]],"12":[["slice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mo",{}]],"13":[["d__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__',",{}]],"14":[[" '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook",{}]],"15":[["__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center',",{}]],"16":[[" 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index",{}]],"17":[["', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', ",{}]],"18":[["'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', '",{}]],"19":[["rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', '",{}]],"20":[["strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']                     ",{}]],"21":[[">>>                                                                             ",{}]]},"cursor":{"x":4,"y":21}}],[1.263119,{"lines":{"21":[[">>> h                                                                           ",{}]]},"cursor":{"x":5}}],[0.104218,{"lines":{"21":[[">>> he                                                                          ",{}]]},"cursor":{"x":6}}],[0.056409,{"lines":{"21":[[">>> hel                                                                         ",{}]]},"cursor":{"x":7}}],[0.191077,{"lines":{"21":[[">>> help                                                                        ",{}]]},"cursor":{"x":8}}],[0.184457,{"lines":{"21":[[">>> help(                                                                       ",{}]]},"cursor":{"x":9}}],[0.328794,{"lines":{"21":[[">>> help(s                                                                      ",{}]]},"cursor":{"x":10}}],[1.950147,{"lines":{"21":[[">>> help(                                                                       ",{}]]},"cursor":{"x":9}}],[0.264937,{"lines":{"21":[[">>> help(t                                                                      ",{}]]},"cursor":{"x":10}}],[0.04767,{"lines":{"21":[[">>> help(ty                                                                     ",{}]]},"cursor":{"x":11}}],[0.071702,{"lines":{"21":[[">>> help(typ                                                                    ",{}]]},"cursor":{"x":12}}],[0.07284400000000001,{"lines":{"21":[[">>> help(type                                                                   ",{}]]},"cursor":{"x":13}}],[0.184051,{"lines":{"21":[[">>> help(type(                                                                  ",{}]]},"cursor":{"x":14}}],[0.191745,{"lines":{"21":[[">>> help(type(s                                                                 ",{}]]},"cursor":{"x":15}}],[0.215822,{"lines":{"21":[[">>> help(type(s)                                                                ",{}]]},"cursor":{"x":16}}],[0.160108,{"lines":{"21":[[">>> help(type(s))                                                               ",{}]]},"cursor":{"x":17}}],[0.207968,{"cursor":{"x":0,"y":22}}],[0.017568,{"lines":{"0":[["                                                                                ",{}]],"1":[["                                                                                ",{}]],"2":[["                                                                                ",{}]],"3":[["                                                                                ",{}]],"4":[["                                                                                ",{}]],"5":[["                                                                                ",{}]],"6":[["                                                                                ",{}]],"7":[["                                                                                ",{}]],"8":[["                                                                                ",{}]],"9":[["                                                                                ",{}]],"10":[["                                                                                ",{}]],"11":[["                                                                                ",{}]],"12":[["                                                                                ",{}]],"13":[["                                                                                ",{}]],"14":[["                                                                                ",{}]],"15":[["                                                                                ",{}]],"16":[["                                                                                ",{}]],"17":[["                                                                                ",{}]],"18":[["                                                                                ",{}]],"19":[["                                                                                ",{}]],"20":[["                                                                                ",{}]],"21":[["                                                                                ",{}]]}}],[5.4e-05,{"lines":{"0":[["Help on class str in module __builtin__:                                        ",{}]],"2":[["class ",{}],["str",{"bold":true}],["(basestring)                                                           ",{}]],"3":[[" |  str(object='') -> string                                                    ",{}]],"4":[[" |                                                                              ",{}]],"5":[[" |  Return a nice string representation of the object.                          ",{}]],"6":[[" |  If the argument is a string, the return value is the same object.           ",{}]],"7":[[" |                                                                              ",{}]],"8":[[" |  Method resolution order:                                                    ",{}]],"9":[[" |      str                                                                     ",{}]],"10":[[" |      basestring                                                              ",{}]],"11":[[" |      object                                                                  ",{}]],"12":[[" |                                                                              ",{}]],"13":[[" |  Methods defined here:                                                       ",{}]],"14":[[" |                                                                              ",{}]],"15":[[" |  ",{}],["__add__",{"bold":true}],["(...)                                                                ",{}]],"16":[[" |      x.__add__(y) <==> x+y                                                   ",{}]],"17":[[" |                                                                              ",{}]],"18":[[" |  ",{}],["__contains__",{"bold":true}],["(...)                                                           ",{}]],"19":[[" |      x.__contains__(y) <==> y in x                                           ",{}]],"20":[[" |                                                                              ",{}]],"21":[[" |  ",{}],["__eq__",{"bold":true}],["(...)                                                                 ",{}]],"22":[[" |      x.__eq__(y) <==> x==y                                                   ",{}]],"23":[[" |                                                                              ",{}]],"24":[[":                                                                               ",{}]]},"cursor":{"x":1,"y":24}}],[0.821738,{"lines":{"24":[["                                                                                ",{}]]},"cursor":{"x":0}}],[6.1e-05,{"lines":{"0":[[" |  Methods defined here:                                                       ",{}]],"1":[[" |                                                                              ",{}]],"2":[[" |  ",{}],["__add__",{"bold":true}],["(...)                                                                ",{}]],"3":[[" |      x.__add__(y) <==> x+y                                                   ",{}]],"5":[[" |  ",{}],["__contains__",{"bold":true}],["(...)                                                           ",{}]],"6":[[" |      x.__contains__(y) <==> y in x                                           ",{}]],"8":[[" |  ",{}],["__eq__",{"bold":true}],["(...)                                                                 ",{}]],"9":[[" |      x.__eq__(y) <==> x==y                                                   ",{}]],"10":[[" |                                                                              ",{}]],"11":[[" |  ",{}],["__format__",{"bold":true}],["(...)                                                             ",{}]],"12":[[" |      S.__format__(format_spec) -> string                                     ",{}]],"13":[[" |                                                                              ",{}]],"14":[[" |      Return a formatted version of S as described by format_spec.            ",{}]],"15":[[" |                                                                              ",{}]],"16":[[" |  ",{}],["__ge__",{"bold":true}],["(...)                                                                 ",{}]],"17":[[" |      x.__ge__(y) <==> x>=y                                                   ",{}]],"18":[[" |                                                                              ",{}]],"19":[[" |  ",{}],["__getattribute__",{"bold":true}],["(...)                                                       ",{}]],"20":[[" |      x.__getattribute__('name') <==> x.name                                  ",{}]],"21":[[" |                                                                              ",{}]],"22":[[" |  ",{}],["__getitem__",{"bold":true}],["(...)                                                            ",{}]],"23":[[" |      x.__getitem__(y) <==> x[y]                                              ",{}]],"24":[[":                                                                               ",{}]]},"cursor":{"x":1}}],[0.216419,{"lines":{"24":[["                                                                                ",{}]]},"cursor":{"x":0}}],[8.1e-05,{"lines":{"0":[[" |                                                                              ",{}]],"1":[[" |      Return a formatted version of S as described by format_spec.            ",{}]],"2":[[" |                                                                              ",{}]],"3":[[" |  ",{}],["__ge__",{"bold":true}],["(...)                                                                 ",{}]],"4":[[" |      x.__ge__(y) <==> x>=y                                                   ",{}]],"5":[[" |                                                                              ",{}]],"6":[[" |  ",{}],["__getattribute__",{"bold":true}],["(...)                                                       ",{}]],"7":[[" |      x.__getattribute__('name') <==> x.name                                  ",{}]],"8":[[" |                                                                              ",{}]],"9":[[" |  ",{}],["__getitem__",{"bold":true}],["(...)                                                            ",{}]],"10":[[" |      x.__getitem__(y) <==> x[y]                                              ",{}]],"11":[[" |                                                                              ",{}]],"12":[[" |  ",{}],["__getnewargs__",{"bold":true}],["(...)                                                         ",{}]],"14":[[" |  ",{}],["__getslice__",{"bold":true}],["(...)                                                           ",{}]],"15":[[" |      x.__getslice__(i, j) <==> x[i:j]                                        ",{}]],"16":[[" |                                                                              ",{}]],"17":[[" |      Use of negative indices is not supported.                               ",{}]],"19":[[" |  ",{}],["__gt__",{"bold":true}],["(...)                                                                 ",{}]],"20":[[" |      x.__gt__(y) <==> x>y                                                    ",{}]],"22":[[" |  ",{}],["__hash__",{"bold":true}],["(...)                                                               ",{}]],"23":[[" |      x.__hash__() <==> hash(x)                                               ",{}]],"24":[[":                                                                               ",{}]]},"cursor":{"x":1}}],[0.144264,{"lines":{"24":[["                                                                                ",{}]]},"cursor":{"x":0}}],[4.5e-05,{"lines":{"1":[[" |  ",{}],["__getslice__",{"bold":true}],["(...)                                                           ",{}]],"2":[[" |      x.__getslice__(i, j) <==> x[i:j]                                        ",{}]],"3":[[" |                                                                              ",{}]],"4":[[" |      Use of negative indices is not supported.                               ",{}]],"6":[[" |  ",{}],["__gt__",{"bold":true}],["(...)                                                                 ",{}]],"7":[[" |      x.__gt__(y) <==> x>y                                                    ",{}]],"9":[[" |  ",{}],["__hash__",{"bold":true}],["(...)                                                               ",{}]],"10":[[" |      x.__hash__() <==> hash(x)                                               ",{}]],"12":[[" |  ",{}],["__le__",{"bold":true}],["(...)                                                                 ",{}]],"13":[[" |      x.__le__(y) <==> x<=y                                                   ",{}]],"14":[[" |                                                                              ",{}]],"15":[[" |  ",{}],["__len__",{"bold":true}],["(...)                                                                ",{}]],"16":[[" |      x.__len__() <==> len(x)                                                 ",{}]],"17":[[" |                                                                              ",{}]],"18":[[" |  ",{}],["__lt__",{"bold":true}],["(...)                                                                 ",{}]],"19":[[" |      x.__lt__(y) <==> x<y                                                    ",{}]],"20":[[" |                                                                              ",{}]],"21":[[" |  ",{}],["__mod__",{"bold":true}],["(...)                                                                ",{}]],"22":[[" |      x.__mod__(y) <==> x%y                                                   ",{}]],"23":[[" |                                                                              ",{}]],"24":[[":                                                                               ",{}]]},"cursor":{"x":1}}],[0.255141,{"lines":{"24":[["/                                                                               ",{}]]}}],[0.688491,{"lines":{"24":[["/c                                                                              ",{}]]},"cursor":{"x":2}}],[0.088491,{"lines":{"24":[["/co                                                                             ",{}]]},"cursor":{"x":3}}],[0.071925,{"lines":{"24":[["/con                                                                            ",{}]]},"cursor":{"x":4}}],[0.127444,{"lines":{"24":[["/cont                                                                           ",{}]]},"cursor":{"x":5}}],[0.088036,{"lines":{"24":[["/conta                                                                          ",{}]]},"cursor":{"x":6}}],[0.047922,{"lines":{"24":[["/contai                                                                         ",{}]]},"cursor":{"x":7}}],[0.056394,{"lines":{"24":[["/contain                                                                        ",{}]]},"cursor":{"x":8}}],[0.207585,{"lines":{"24":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.002474,{"lines":{"0":[[" |      such that sub is ",{}],["contain",{"inverse":true}],["ed within S[start:end].  Optional               ",{}]],"1":[[" |      arguments start and end are interpreted as in slice notation.           ",{}]],"2":[[" |                                                                              ",{}]],"3":[[" |      Return -1 on failure.                                                   ",{}]],"4":[[" |                                                                              ",{}]],"5":[[" |  ",{}],["format",{"bold":true}],["(...)                                                                 ",{}]],"6":[[" |      S.format(*args, **kwargs) -> string                                     ",{}]],"7":[[" |                                                                              ",{}]],"8":[[" |      Return a formatted version of S, using substitutions from args and kwarg",{}]],"9":[["s.                                                                              ",{}]],"10":[[" |      The substitutions are identified by braces ('{' and '}').               ",{}]],"12":[[" |  ",{}],["index",{"bold":true}],["(...)                                                                  ",{}]],"13":[[" |      S.index(sub [,start [,end]]) -> int                                     ",{}]],"15":[[" |      Like S.find() but raise ValueError when the substring is not found.     ",{}]],"16":[[" |                                                                              ",{}]],"17":[[" |  ",{}],["isalnum",{"bold":true}],["(...)                                                                ",{}]],"18":[[" |      S.isalnum() -> bool                                                     ",{}]],"19":[[" |                                                                              ",{}]],"20":[[" |      Return True if all characters in S are alphanumeric                     ",{}]],"21":[[" |      and there is at least one character in S, False otherwise.              ",{}]],"22":[[" |                                                                              ",{}]],"23":[[" |  ",{}],["isalpha",{"bold":true}],["(...)                                                                ",{}]],"24":[[":                                                                               ",{}]]},"cursor":{"x":1}}],[1.173643,{"lines":{"24":[["                                                                                ",{}]]},"cursor":{"x":0}}],[5.2e-05,{"lines":{"0":[[" |      Return the lowest index in S where substring sub is found,              ",{}]],"1":[[" |      such that sub is ",{}],["contain",{"inverse":true}],["ed within S[start:end].  Optional               ",{}]],"2":[[" |      arguments start and end are interpreted as in slice notation.           ",{}]],"3":[[" |                                                                              ",{}]],"4":[[" |      Return -1 on failure.                                                   ",{}]],"5":[[" |                                                                              ",{}]],"6":[[" |  ",{}],["format",{"bold":true}],["(...)                                                                 ",{}]],"7":[[" |      S.format(*args, **kwargs) -> string                                     ",{}]],"8":[[" |                                                                              ",{}]],"9":[[" |      Return a formatted version of S, using substitutions from args and kwarg",{}]],"10":[["s.                                                                              ",{}]],"11":[[" |      The substitutions are identified by braces ('{' and '}').               ",{}]],"12":[[" |                                                                              ",{}]],"13":[[" |  ",{}],["index",{"bold":true}],["(...)                                                                  ",{}]],"14":[[" |      S.index(sub [,start [,end]]) -> int                                     ",{}]],"15":[[" |                                                                              ",{}]],"16":[[" |      Like S.find() but raise ValueError when the substring is not found.     ",{}]],"17":[[" |                                                                              ",{}]],"18":[[" |  ",{}],["isalnum",{"bold":true}],["(...)                                                                ",{}]],"19":[[" |      S.isalnum() -> bool                                                     ",{}]],"20":[[" |                                                                              ",{}]],"21":[[" |      Return True if all characters in S are alphanumeric                     ",{}]],"22":[[" |      and there is at least one character in S, False otherwise.              ",{}]],"23":[[" |                                                                              ",{}]],"24":[[":                                                                               ",{}]]},"cursor":{"x":1}}],[0.30446,{"lines":{"0":[[" |                                                                              ",{}]],"1":[[" |      Return the lowest index in S where substring sub is found,              ",{}]],"2":[[" |      such that sub is ",{}],["contain",{"inverse":true}],["ed within S[start:end].  Optional               ",{}]],"3":[[" |      arguments start and end are interpreted as in slice notation.           ",{}]],"4":[[" |                                                                              ",{}]],"5":[[" |      Return -1 on failure.                                                   ",{}]],"6":[[" |                                                                              ",{}]],"7":[[" |  ",{}],["format",{"bold":true}],["(...)                                                                 ",{}]],"8":[[" |      S.format(*args, **kwargs) -> string                                     ",{}]],"9":[[" |                                                                              ",{}]],"10":[[" |      Return a formatted version of S, using substitutions from args and kwarg",{}]],"11":[["s.                                                                              ",{}]],"12":[[" |      The substitutions are identified by braces ('{' and '}').               ",{}]],"13":[[" |                                                                              ",{}]],"14":[[" |  ",{}],["index",{"bold":true}],["(...)                                                                  ",{}]],"15":[[" |      S.index(sub [,start [,end]]) -> int                                     ",{}]],"16":[[" |                                                                              ",{}]],"17":[[" |      Like S.find() but raise ValueError when the substring is not found.     ",{}]],"18":[[" |                                                                              ",{}]],"19":[[" |  ",{}],["isalnum",{"bold":true}],["(...)                                                                ",{}]],"20":[[" |      S.isalnum() -> bool                                                     ",{}]],"21":[[" |                                                                              ",{}]],"22":[[" |      Return True if all characters in S are alphanumeric                     ",{}]],"23":[[" |      and there is at least one character in S, False otherwise.              ",{}]]}}],[0.143462,{"lines":{"0":[[" |      S.find(sub [,start [,end]]) -> int                                      ",{}]],"1":[[" |                                                                              ",{}]],"2":[[" |      Return the lowest index in S where substring sub is found,              ",{}]],"3":[[" |      such that sub is ",{}],["contain",{"inverse":true}],["ed within S[start:end].  Optional               ",{}]],"4":[[" |      arguments start and end are interpreted as in slice notation.           ",{}]],"5":[[" |                                                                              ",{}]],"6":[[" |      Return -1 on failure.                                                   ",{}]],"7":[[" |                                                                              ",{}]],"8":[[" |  ",{}],["format",{"bold":true}],["(...)                                                                 ",{}]],"9":[[" |      S.format(*args, **kwargs) -> string                                     ",{}]],"10":[[" |                                                                              ",{}]],"11":[[" |      Return a formatted version of S, using substitutions from args and kwarg",{}]],"12":[["s.                                                                              ",{}]],"13":[[" |      The substitutions are identified by braces ('{' and '}').               ",{}]],"14":[[" |                                                                              ",{}]],"15":[[" |  ",{}],["index",{"bold":true}],["(...)                                                                  ",{}]],"16":[[" |      S.index(sub [,start [,end]]) -> int                                     ",{}]],"17":[[" |                                                                              ",{}]],"18":[[" |      Like S.find() but raise ValueError when the substring is not found.     ",{}]],"19":[[" |                                                                              ",{}]],"20":[[" |  ",{}],["isalnum",{"bold":true}],["(...)                                                                ",{}]],"21":[[" |      S.isalnum() -> bool                                                     ",{}]],"22":[[" |                                                                              ",{}]],"23":[[" |      Return True if all characters in S are alphanumeric                     ",{}]]}}],[0.152272,{"lines":{"0":[[" |  ",{}],["find",{"bold":true}],["(...)                                                                   ",{}]],"1":[[" |      S.find(sub [,start [,end]]) -> int                                      ",{}]],"2":[[" |                                                                              ",{}]],"3":[[" |      Return the lowest index in S where substring sub is found,              ",{}]],"4":[[" |      such that sub is ",{}],["contain",{"inverse":true}],["ed within S[start:end].  Optional               ",{}]],"5":[[" |      arguments start and end are interpreted as in slice notation.           ",{}]],"6":[[" |                                                                              ",{}]],"7":[[" |      Return -1 on failure.                                                   ",{}]],"8":[[" |                                                                              ",{}]],"9":[[" |  ",{}],["format",{"bold":true}],["(...)                                                                 ",{}]],"10":[[" |      S.format(*args, **kwargs) -> string                                     ",{}]],"11":[[" |                                                                              ",{}]],"12":[[" |      Return a formatted version of S, using substitutions from args and kwarg",{}]],"13":[["s.                                                                              ",{}]],"14":[[" |      The substitutions are identified by braces ('{' and '}').               ",{}]],"15":[[" |                                                                              ",{}]],"16":[[" |  ",{}],["index",{"bold":true}],["(...)                                                                  ",{}]],"17":[[" |      S.index(sub [,start [,end]]) -> int                                     ",{}]],"18":[[" |                                                                              ",{}]],"19":[[" |      Like S.find() but raise ValueError when the substring is not found.     ",{}]],"20":[[" |                                                                              ",{}]],"21":[[" |  ",{}],["isalnum",{"bold":true}],["(...)                                                                ",{}]],"22":[[" |      S.isalnum() -> bool                                                     ",{}]],"23":[[" |                                                                              ",{}]]}}],[0.15119,{"lines":{"24":[["                                                                                ",{}]]},"cursor":{"x":0}}],[4e-05,{"lines":{"0":[[" |                                                                              ",{}]],"1":[[" |  ",{}],["find",{"bold":true}],["(...)                                                                   ",{}]],"2":[[" |      S.find(sub [,start [,end]]) -> int                                      ",{}]],"3":[[" |                                                                              ",{}]],"4":[[" |      Return the lowest index in S where substring sub is found,              ",{}]],"5":[[" |      such that sub is ",{}],["contain",{"inverse":true}],["ed within S[start:end].  Optional               ",{}]],"6":[[" |      arguments start and end are interpreted as in slice notation.           ",{}]],"7":[[" |                                                                              ",{}]],"8":[[" |      Return -1 on failure.                                                   ",{}]],"9":[[" |                                                                              ",{}]],"10":[[" |  ",{}],["format",{"bold":true}],["(...)                                                                 ",{}]],"11":[[" |      S.format(*args, **kwargs) -> string                                     ",{}]],"12":[[" |                                                                              ",{}]],"13":[[" |      Return a formatted version of S, using substitutions from args and kwarg",{}]],"14":[["s.                                                                              ",{}]],"15":[[" |      The substitutions are identified by braces ('{' and '}').               ",{}]],"16":[[" |                                                                              ",{}]],"17":[[" |  ",{}],["index",{"bold":true}],["(...)                                                                  ",{}]],"18":[[" |      S.index(sub [,start [,end]]) -> int                                     ",{}]],"19":[[" |                                                                              ",{}]],"20":[[" |      Like S.find() but raise ValueError when the substring is not found.     ",{}]],"21":[[" |                                                                              ",{}]],"22":[[" |  ",{}],["isalnum",{"bold":true}],["(...)                                                                ",{}]],"23":[[" |      S.isalnum() -> bool                                                     ",{}]],"24":[[":                                                                               ",{}]]},"cursor":{"x":1}}],[0.83295,{"lines":{"24":[["/                                                                               ",{}]]}}],[0.936102,{"lines":{"24":[["/l                                                                              ",{}]]},"cursor":{"x":2}}],[0.456079,{"lines":{"24":[["/ls                                                                             ",{}]]},"cursor":{"x":3}}],[0.095722,{"lines":{"24":[["/lsp                                                                            ",{}]]},"cursor":{"x":4}}],[0.104806,{"lines":{"24":[["/lspl                                                                           ",{}]]},"cursor":{"x":5}}],[0.199191,{"lines":{"24":[["/lspli                                                                          ",{}]]},"cursor":{"x":6}}],[0.135642,{"lines":{"24":[["/lsplit                                                                         ",{}]]},"cursor":{"x":7}}],[0.119681,{"lines":{"24":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.001012,{"lines":{"5":[[" |      such that sub is contained within S[start:end].  Optional               ",{}]],"24":[["Pattern not found  (press RETURN)",{"inverse":true}],["                                               ",{}]]},"cursor":{"x":33}}],[0.751238,{"lines":{"24":[["/                                                                               ",{}]]},"cursor":{"x":1}}],[0.31275,{"lines":{"24":[["/r                                                                              ",{}]]},"cursor":{"x":2}}],[0.262778,{"lines":{"24":[["/rs                                                                             ",{}]]},"cursor":{"x":3}}],[0.080013,{"lines":{"24":[["/rsp                                                                            ",{}]]},"cursor":{"x":4}}],[0.07301299999999999,{"lines":{"24":[["/rspl                                                                           ",{}]]},"cursor":{"x":5}}],[0.190763,{"lines":{"24":[["/rspli                                                                          ",{}]]},"cursor":{"x":6}}],[0.09703199999999999,{"lines":{"24":[["/rsplit                                                                         ",{}]]},"cursor":{"x":7}}],[0.095161,{"lines":{"24":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.001438,{"lines":{"0":[[" |  ",{}],["rsplit",{"bold":true,"inverse":true}],["(...)                                                                 ",{}]],"1":[[" |      S.",{}],["rsplit",{"inverse":true}],["([sep [,maxsplit]]) -> list of strings                          ",{}]],"2":[[" |                                                                              ",{}]],"3":[[" |      Return a list of the words in the string S, using sep as the            ",{}]],"4":[[" |      delimiter string, starting at the end of the string and working         ",{}]],"5":[[" |      to the front.  If maxsplit is given, at most maxsplit splits are        ",{}]],"6":[[" |      done. If sep is not specified or is None, any whitespace string         ",{}]],"7":[[" |      is a separator.                                                         ",{}]],"8":[[" |                                                                              ",{}]],"9":[[" |  ",{}],["rstrip",{"bold":true}],["(...)                                                                 ",{}]],"10":[[" |      S.rstrip([chars]) -> string or unicode                                  ",{}]],"11":[[" |                                                                              ",{}]],"12":[[" |      Return a copy of the string S with trailing whitespace removed.         ",{}]],"13":[[" |      If chars is given and not None, remove characters in chars instead.     ",{}]],"14":[[" |      If chars is unicode, S will be converted to unicode before stripping    ",{}]],"15":[[" |                                                                              ",{}]],"16":[[" |  ",{}],["split",{"bold":true}],["(...)                                                                  ",{}]],"17":[[" |      S.split([sep [,maxsplit]]) -> list of strings                           ",{}]],"18":[[" |                                                                              ",{}]],"19":[[" |      Return a list of the words in the string S, using sep as the            ",{}]],"20":[[" |      delimiter string.  If maxsplit is given, at most maxsplit               ",{}]],"21":[[" |      splits are done. If sep is not specified or is None, any                ",{}]],"22":[[" |      whitespace string is a separator and empty strings are removed          ",{}]],"23":[[" |      from the result.                                                        ",{}]],"24":[[":                                                                               ",{}]]},"cursor":{"x":1}}],[1.127568,{"lines":{"0":[[" |      S.",{}],["rsplit",{"inverse":true}],["([sep [,maxsplit]]) -> list of strings                          ",{}]],"1":[[" |                                                                              ",{}]],"2":[[" |      Return a list of the words in the string S, using sep as the            ",{}]],"3":[[" |      delimiter string, starting at the end of the string and working         ",{}]],"4":[[" |      to the front.  If maxsplit is given, at most maxsplit splits are        ",{}]],"5":[[" |      done. If sep is not specified or is None, any whitespace string         ",{}]],"6":[[" |      is a separator.                                                         ",{}]],"7":[[" |                                                                              ",{}]],"8":[[" |  ",{}],["rstrip",{"bold":true}],["(...)                                                                 ",{}]],"9":[[" |      S.rstrip([chars]) -> string or unicode                                  ",{}]],"10":[[" |                                                                              ",{}]],"11":[[" |      Return a copy of the string S with trailing whitespace removed.         ",{}]],"12":[[" |      If chars is given and not None, remove characters in chars instead.     ",{}]],"13":[[" |      If chars is unicode, S will be converted to unicode before stripping    ",{}]],"14":[[" |                                                                              ",{}]],"15":[[" |  ",{}],["split",{"bold":true}],["(...)                                                                  ",{}]],"16":[[" |      S.split([sep [,maxsplit]]) -> list of strings                           ",{}]],"17":[[" |                                                                              ",{}]],"18":[[" |      Return a list of the words in the string S, using sep as the            ",{}]],"19":[[" |      delimiter string.  If maxsplit is given, at most maxsplit               ",{}]],"20":[[" |      splits are done. If sep is not specified or is None, any                ",{}]],"21":[[" |      whitespace string is a separator and empty strings are removed          ",{}]],"22":[[" |      from the result.                                                        ",{}]],"23":[[" |                                                                              ",{}]]}}],[0.504116,{"lines":{"24":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.000777,{"lines":{"0":[[" |  ",{}],["rsplit",{"bold":true,"inverse":true}],["(...)                                                                 ",{}]],"1":[[" |      S.",{}],["rsplit",{"inverse":true}],["([sep [,maxsplit]]) -> list of strings                          ",{}]],"2":[[" |                                                                              ",{}]],"3":[[" |      Return a list of the words in the string S, using sep as the            ",{}]],"4":[[" |      delimiter string, starting at the end of the string and working         ",{}]],"5":[[" |      to the front.  If maxsplit is given, at most maxsplit splits are        ",{}]],"6":[[" |      done. If sep is not specified or is None, any whitespace string         ",{}]],"7":[[" |      is a separator.                                                         ",{}]],"8":[[" |                                                                              ",{}]],"9":[[" |  ",{}],["rstrip",{"bold":true}],["(...)                                                                 ",{}]],"10":[[" |      S.rstrip([chars]) -> string or unicode                                  ",{}]],"11":[[" |                                                                              ",{}]],"12":[[" |      Return a copy of the string S with trailing whitespace removed.         ",{}]],"13":[[" |      If chars is given and not None, remove characters in chars instead.     ",{}]],"14":[[" |      If chars is unicode, S will be converted to unicode before stripping    ",{}]],"15":[[" |                                                                              ",{}]],"16":[[" |  ",{}],["split",{"bold":true}],["(...)                                                                  ",{}]],"17":[[" |      S.split([sep [,maxsplit]]) -> list of strings                           ",{}]],"18":[[" |                                                                              ",{}]],"19":[[" |      Return a list of the words in the string S, using sep as the            ",{}]],"20":[[" |      delimiter string.  If maxsplit is given, at most maxsplit               ",{}]],"21":[[" |      splits are done. If sep is not specified or is None, any                ",{}]],"22":[[" |      whitespace string is a separator and empty strings are removed          ",{}]],"23":[[" |      from the result.                                                        ",{}]],"24":[[":                                                                               ",{}]]},"cursor":{"x":1}}],[0.495304,{"lines":{"0":[["bash-3.2$ python                                                                ",{}]],"1":[["Python 2.7.5 (default, Nov 26 2013, 10:28:53)                                   ",{}]],"2":[["[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin                ",{}]],"3":[["Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.          ",{}]],"4":[[">>> s = \"Hi there! I'm Tom, and I like REPLs\"                                   ",{}]],"5":[[">>> s.split()                                                                   ",{}]],"6":[["['Hi', 'there!', \"I'm\", 'Tom,', 'and', 'I', 'like', 'REPLs']                    ",{}]],"7":[[">>> sorted(s.split())                                                           ",{}]],"8":[["['Hi', 'I', \"I'm\", 'REPLs', 'Tom,', 'and', 'like', 'there!']                    ",{}]],"9":[[">>> dir(s)                                                                      ",{}]],"10":[["['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__",{}]],"11":[["format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__get",{}]],"12":[["slice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mo",{}]],"13":[["d__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__',",{}]],"14":[[" '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook",{}]],"15":[["__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center',",{}]],"16":[[" 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index",{}]],"17":[["', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', ",{}]],"18":[["'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', '",{}]],"19":[["rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', '",{}]],"20":[["strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']                     ",{}]],"21":[[">>> help(type(s))                                                               ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                                                ",{}]],"24":[["                                                                                ",{}]]},"cursor":{"x":0,"y":22}}],[0.0006670000000000001,{"lines":{"23":[[">>>                                                                             ",{}]]},"cursor":{"x":4,"y":23}}],[2.159071,{"cursor":{"x":0,"y":24}}],[0.004327,{"lines":{"24":[["bash-3.2$                                                                       ",{}]]},"cursor":{"x":10}}],[0.675323,{"lines":{"0":[["Python 2.7.5 (default, Nov 26 2013, 10:28:53)                                   ",{}]],"1":[["[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin                ",{}]],"2":[["Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.          ",{}]],"3":[[">>> s = \"Hi there! I'm Tom, and I like REPLs\"                                   ",{}]],"4":[[">>> s.split()                                                                   ",{}]],"5":[["['Hi', 'there!', \"I'm\", 'Tom,', 'and', 'I', 'like', 'REPLs']                    ",{}]],"6":[[">>> sorted(s.split())                                                           ",{}]],"7":[["['Hi', 'I', \"I'm\", 'REPLs', 'Tom,', 'and', 'like', 'there!']                    ",{}]],"8":[[">>> dir(s)                                                                      ",{}]],"9":[["['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__",{}]],"10":[["format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__get",{}]],"11":[["slice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mo",{}]],"12":[["d__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__',",{}]],"13":[[" '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook",{}]],"14":[["__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center',",{}]],"15":[[" 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index",{}]],"16":[["', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', ",{}]],"17":[["'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', '",{}]],"18":[["rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', '",{}]],"19":[["strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']                     ",{}]],"20":[[">>> help(type(s))                                                               ",{}]],"21":[["                                                                                ",{}]],"22":[[">>>                                                                             ",{}]],"23":[["bash-3.2$ exit                                                                  ",{}]],"24":[["                                                                                ",{}]]},"cursor":{"x":0}}]]